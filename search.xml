<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot速通</title>
      <link href="/2024/05/21/SpringBoot%E9%80%9F%E9%80%9A/"/>
      <url>/2024/05/21/SpringBoot%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>简化 Spring 的开发流程，加速开发过程。</p><h3 id="Spring-框架的特性"><a href="#Spring-框架的特性" class="headerlink" title="Spring 框架的特性"></a>Spring 框架的<strong>特性</strong></h3><p>非侵入式：基于Spring开发的应用中的对象可以<code>不依赖</code>于Spring的API</p><p>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。<code>对象的创建都是给了 Spring 框架</code>。</p><p>依赖注入：DI——Dependency Injection，是指依赖的对象<code>不需要手动调用 setXX 方法去设置</code>，而是<code>通过配置赋值</code>。</p><p>面向切面编程：Aspect Oriented Programming——AOP</p><p>容器：Spring 是一个容器，因为它包含并且<code>管理应用对象的生命周期</code></p><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用<code>XML</code>和<code>Java注解</code>组合这些对象。</p><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</p><h5 id="Spring-的组件"><a href="#Spring-的组件" class="headerlink" title="Spring 的组件"></a>Spring 的组件</h5><p><img src="https://pdai.tech/images/spring/springframework/spring-framework-introduce-8.png" alt="img"></p><p>最重要的是 <code>Core Containers</code>。</p><ul><li>Beans：基础部分，提供 IOC 和 DI。</li><li>Core：封装 Spring 底层（资源访问、类型转换及一些常用工具类）。</li><li>Context：建立在 Core 和 Beans 模块的基础之上，<ul><li>集成 Beans 模块功能</li><li>添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等</li><li>ApplicationContext 接口是上下文模块的焦点。</li></ul></li><li>SpEL：表达式语言支持<ul><li>改属性值</li><li>方法调用</li><li>访问及修改数组、容器和索引器</li><li>命名变量</li><li>支持算数和逻辑运算</li><li>从 Spring 容器获取 Bean</li><li>列表投影、选择和一般的列表聚合等</li></ul></li></ul><p><code>Data Access / Integration</code></p><ul><li><p>JDBC 模块：提供一个 JDBC 样例模板</p><ul><li>消除传统冗长的 JDBC 编码</li><li>事务控制</li></ul></li><li><p>ORM 模块：提供与流行的“对象-关系”映射框架无缝集成的 API</p><ul><li>包括 JPA、JDO、Hibernate 和 MyBatis 等</li><li>使用 Spring 事务管理，无需额外控制事务</li></ul></li><li><p>OXM 模块：提供了一个支持 Object &#x2F;XML 映射的抽象层实现</p><ul><li>如 JAXB、Castor、XMLBeans、JiBX 和 XStream</li><li>将 Java 对象映射成 XML 数据，或者将XML 数据映射成 Java 对象</li></ul></li><li><p>JMS 模块：指 Java 消息服务提供一套 “消息生产者、消息消费者”模板</p><ul><li>用于更加简单的使用 JMS，JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li></ul></li><li><p>Transactions 事务模块：支持编程和声明式事务管理</p></li></ul><p><code>Web  模块</code></p><ul><li><p>Web：提供了基本的 Web 开发集成特性</p><ul><li>多文件上传</li><li>使用的 Servlet 监听器的 IOC 容器初始化</li><li>Web 应用上下文</li></ul></li><li><p>Servlet：提供了一个 Spring MVC Web 框架实现</p><ul><li>基于注解的请求资源注入</li><li>更简单的数据绑定</li><li>数据验证等</li></ul></li><li><p>WebSocket</p></li><li><p>Portlet</p></li></ul><h2 id="Spring-缺点"><a href="#Spring-缺点" class="headerlink" title="Spring 缺点"></a>Spring 缺点</h2><ol><li>配置繁琐（XML 繁琐）</li><li>以来繁琐（maven 管理繁琐，jar 包版本兼容问题）</li></ol><p>SpringBoot 特性</p><ul><li>自动配置，写很少的配置文件</li><li>起步依赖，将坐标打包到一起</li></ul><h2 id="构建-SpringBoot-项目"><a href="#构建-SpringBoot-项目" class="headerlink" title="构建 SpringBoot 项目"></a>构建 SpringBoot 项目</h2><h3 id="方式一：通过-maven-手工配置"><a href="#方式一：通过-maven-手工配置" class="headerlink" title="方式一：通过 maven 手工配置"></a>方式一：通过 maven 手工配置</h3><ol><li>创建 maven 项目</li><li>导入 SpringBoot 起步依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义 controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写引导类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类，springboot 工程的入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动测试</li></ol><h3 id="IDEA-内置-springboot-initializer-构建"><a href="#IDEA-内置-springboot-initializer-构建" class="headerlink" title="IDEA 内置 springboot initializer 构建"></a>IDEA 内置 springboot initializer 构建</h3><p>如果是使用 spring intializer 的创建方式的话可以手动选择需要的依赖。</p><h3 id="spirng-官网项目模板构建"><a href="#spirng-官网项目模板构建" class="headerlink" title="spirng 官网项目模板构建"></a>spirng 官网项目模板构建</h3><p>也可以使用 <a href="https://start.spring.io/">https://start.spring.io/</a> 选择想要的依赖，直接生成 springboot 工程，下载，运行。</p><h2 id="springboot-起步依赖原理分析"><a href="#springboot-起步依赖原理分析" class="headerlink" title="springboot 起步依赖原理分析"></a>springboot 起步依赖原理分析</h2><h5 id="spring-boot-starter-parent"><a href="#spring-boot-starter-parent" class="headerlink" title="spring-boot-starter-parent"></a>spring-boot-starter-parent</h5><p>个人项目依赖一个 parent，即 <code>spring-boot-starter-parent</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>追溯源码，发现 spring-boot-starter-parent 依赖 <code>spring-boot-dependencies</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续追溯，发现 spring-boot-dependencies 就没有 parent 了。</p><p>在个人项目 <code>pom.xml</code> 中，<code>spring-boot-starter-web</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并没有指定版本信息，因为已经在父工程 spring-boot-dependencies中指定了。</p><p>dependencyManagement 是版本锁定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>      </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些依赖不会造成任何冲突，组合了一套最优的技术版本搭配。</p><h5 id="spring-boot-starter-web"><a href="#spring-boot-starter-web" class="headerlink" title="spring-boot-starter-web"></a>spring-boot-starter-web</h5><p>点进去可以看到它依赖的坐标信息。</p><p>这些是没有版本锁定的。</p><p><code>我们的项目</code> —依赖—&gt; <code>spring-boot-starter</code> —依赖—&gt;  <code>spring-boot-starter、spring-boot-starter-json、spring-boot-starter-tomcat、spring-web、spring-webmvc</code>。</p><p>因此，<code>我们的项目</code> —依赖—&gt; <code>spring-boot-starter、spring-boot-starter-json、spring-boot-starter-tomcat、spring-web、spring-webmvc</code>。</p><p>这就是<em>依赖传递</em>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h2><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p>SpringBoot 是基于约定的，很多配置有默认值。</p><p>如果想要自定义覆盖默认，可以使用 <code>application.properties</code> 或 <code>application.yaml</code>  或 <code>application.yml</code> 进行配置。</p><h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p>key-value 形式。</p><p>位于 <code>/src/resources/application.properties</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9090</span></span><br></pre></td></tr></table></figure><h5 id="yaml-yml"><a href="#yaml-yml" class="headerlink" title="yaml &#x2F; yml"></a>yaml &#x2F; yml</h5><p>k-v 之间<strong>必须有空格</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> </span><br></pre></td></tr></table></figure><p>同一目录下优先级：<code>properties &gt; yml &gt; yaml</code></p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>YAML Ain’t Markup Language，数据序列化格式。</p><p>以数据为核心，比传统 xml 更加简洁。</p><p>YMAL 文件有 <code>.yml</code> 和 <code>.yaml</code>。</p><p>对比：</p><h5 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.address</span>=<span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure><h5 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><ul><li>YAML 大小写敏感</li><li>value 之前必须有 $\ge 1$ 个空格 </li><li>相同层级的元素需要左对齐</li><li># 表示注释</li></ul><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><h3 id="内部配置加载顺序"><a href="#内部配置加载顺序" class="headerlink" title="内部配置加载顺序"></a><code>内部配置</code>加载顺序</h3><h3 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a><code>外部配置</code>加载顺序</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次archlinux更新失败</title>
      <link href="/2024/05/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1archlinux%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/05/21/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1archlinux%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>由于毕业这段时间一直在mac上写作，这台电脑用的不是太多，忘记更新系统了。</p><p>和朋友打了电话，被骂考上研究生就开始狂摆了55555。</p><p>遂重整旗鼓，开始coding了。</p><p>在更新系统时，出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[sakana@archlinux ~]$ sudo pacman -Syu</span><br><span class="line">[sudo] password <span class="keyword">for</span> sakana:</span><br><span class="line">:: Synchronizing package databases...</span><br><span class="line"> core is up to <span class="built_in">date</span></span><br><span class="line"> extra is up to <span class="built_in">date</span></span><br><span class="line"> archlinuxcn is up to <span class="built_in">date</span></span><br><span class="line">:: Starting full system upgrade...</span><br><span class="line">:: Replace dbus-python with extra/python-dbus? [Y/n]</span><br><span class="line">resolving dependencies...</span><br><span class="line">looking <span class="keyword">for</span> conflicting packages...</span><br><span class="line">error: failed to prepare transaction (could not satisfy dependencies)</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron25</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron25</span><br></pre></td></tr></table></figure><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><p>通过 google, 找到了一个解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -Rd --nodeps icu</span><br><span class="line">pacman -Syy icu</span><br><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>首先，报错为以下四句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron22</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicui18n.so=74-64&#x27;</span> required by electron25</span><br><span class="line">:: installing icu (75.1-1) breaks dependency <span class="string">&#x27;libicuuc.so=74-64&#x27;</span> required by electron25</span><br></pre></td></tr></table></figure><p><code>icu</code> 在 archlinux 官网的页面为：<a href="https://archlinux.org/packages/core/x86_64/icu/">https://archlinux.org/packages/core/x86_64/icu/</a></p><p>他的全名是<code>International Components for Unicode library</code>，也就是用于 unicode lib 的国际编码组件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Statement-fot-RIT</title>
      <link href="/2024/05/13/statement/"/>
      <url>/2024/05/13/statement/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="48183b78169e34a45fb413f2c98a01e0000fe059322ab4b4d746e4b307479526">96b08424690f950154d47d2ac302ea965f93349137ebe438012e69a9dc2875753b62192594c8c50e3bce10ebe72344a49ad79a60e12336bbfbf491b44955f884298d6a7f03c3000e48d9965c522a04fdfb96a1f519324eeb290e6d3e2639670f9a9d0dadd7fe487491d429a5e1f1daf7014698a0fd3b9bb5a91b120ccdd96b21e0d9e3339c8999e8a35640fb19d0053d5c6ae42b31a062cb42af8e40d2adcf351e3bcefa3c6be29b5f094940e667514978f98436ffb319281b7fadabfbbda8e382afc36083f5b09977f8fb4615ae82c8e61e4339cce7a4661956b331cceaaf00a8e8b5433b6e46f54667b820518c430073839142f1c6fd0300b78b115f67a9814f9401a892df815b27b9d8786d1a9027cf5948aa6decaa5477752b67676963bb6d96db630d01aa01eb80b466193a9e64a8be6edc27680e5b530edc3632b4efda30090aa06e30242a1f472f72b9395c85a0dd9ce1d8293bcf0e59a0ad3541376c60823e02d08ea299ec1be760f9e7763ba06977d299e4efaf49fe89d3393c742bdf10c03cd1f963439d832e41aea0125d6b5345966b5b2657c50caa09aa0fc63eb8efa3fa5b8d39707fb78b3ab60e01f3c52edec94896fa481aadcbb0fae8760505685523f1cdcc2ea284b96895a64db7eb3dcbfcaf63ab9143e24f19d6b5b0c0e10284c4080f7412faedbd057e87c7a228efdde96c2fdabb70f11a79506744729313717f3f5aa288da796c68c56c57bab2c4b18f7240047362004a0cfd84d2f9e2532a4d47227fe8df9c5ef48476a7fb4446eaefb9763dc0045c010c312e4e5fe443cab7cd9dded4db84787379ce4ff1b58c9afae18a02336686290bb623f787cd1ccfb278c7a92e63cbd4b00d70fce103f1b82c601db8e67f03849e6fac97ce3ee206915040e7a05aca476749b965646331386e9945593b285891ef662c7b097263141878c6402076a87af039abbf4cb4fc0f6c274aa7c00d7ce06519188dbbfc937d756a1000792831e36745a00ce3f2638b7a542b5c9ff7ad96b5729c0e8a63447937c68982dab7dbf3bfddf878f4fdd0c48e93b11f2c5e1feabaa076d2cb8f8d52b9f148461d7bd9b970a6a3a3701b942acab45927ca0f4e0ad92c0424c54446c3258cdb538fff620e1fd18be980925e6edd156b54abc59f17f971224e2cf3aac9ec7947c3f6c40391e1846db08219198df5b1247e72bdbd7829c13a5cf5d9bf1187fcb54717a9d5d7d554780ba9f0787cc81ec96c53f0db8e126563307c9322056ebde189bc7dc6f4eb7155c07e97339a81e38ee14b69782fe27d529538fb3dbda0badf65fe914ce587a70dea45b0f16ae339cea4144b7d7a89994df77ab76d525ec45d8c4e26fea901d79558f90b6f8a68de090ff7c664ba884f4b2bc31230002e65353785a96c60ed4bd1ebed5d7dd0dbf78a80d6c3ea43143259e7807436780b703c2521fddfd8363a3ce3c7dd33362685f561988a2a906b0bd9f51fcac25abaf244025fe3f93445f80d21e63767534330eabe60ae6578ab3f5f4a4eaa9b6e31e498836427381d3ab7f16ef403aa690a48991d5651af3560692ea85fd46278b7b9041f5e5eaed0e0e6e82f960d10ae3b187b43735acca7a1508daa08db80dfcfa25bb55fb2928a5ff4b88163306162e7b4ded93aad3a5d742c10d36280402e90825b439ff65d0bfba118b86bbadc7fca2f2259759e868c6eb2b89a32037821affb6b8c6cc3dff34667de00cd1e78c5c2086b0cc8c80ddb0f09af2ed0f259c7c7365605655a07252867165247e1a360286f08a62ef9b74194dc03e299c37ef7d1295a82ea8383c4f54f2a306ab39aee7b5800155b6541e3fb9b161127099c6c9a77443014c9b64295a8686f8722f8dd42f162237d7e0877926b7c71ccfc3d0acba98ba7e1cfe6ef3b2d21fb0429927be13c8f1bedcea426574972533a52f92d968a3c27194ce04877ceee1cd2ac9ac367b667aefe94062bac3feda106f4563e392837c9cf36dfad81f59b2bfaa52b7f74bfbd196fd002ef1118347b8e9491deb1d4987bb5c41f077f1ff5c1e670163ac08ee5507572a158bb0c28f118b5e2756909feaeb53ef8a11e64c7b98a96ab783fcb52620d70a40721784cd6b05f84d0a4d12b6ecbe3e4bc55f1ff15855be4345cc5b261fda3f780e725cf9b5be6b7463089852d8801c572149056721733e3c282cca6202a8dd7662f891ceb9407c34403daf778605e2f22364b0833579d85a7fe015a1b7f645bde4f3899f6ec063d1e4a5076f91206afaac0fb1afee0e4c85b1968e6b48b58d8fbc0c6e47d6c2a3616fa9ada76860080b4a0ef3e376f85897e2afa2610f87868d716892634189f386998b3e2ca8ce56bcf6b7379cd35fdd8c289fa50f862ded0369fe395dcb582fa0f4d400432fb56dc3f59ed3fb937afa22589815a56658015a6225d9643b37caf57650309a3472ab1fedf52590be2e3cecc58d5e9a4041732cac1b862483935fdc20023887b62d20a09bd50787407a3ba5589a0c281b57c0775ff39774407178b13ca3feebc746450145d3d364133b7a1be4b28390779f91e4f915041e43a4f0707cd8200cd3b9174f11a4e4d4e40ba59998f09227b69a5f7b93e73df5b2b74620eb0ca3ea310c853e3e172d51a3a518a48815d85cb2622191a0d36c70316b19d0c7e75142dde816361d05d1ad155f8e4c11c4761640c0e5da1c589702803062e8c14c38607111cfbde5e0ac486fd41aba2c5677978a8a155899e450c62d031427644dabc476192c154aa515ecbda424a1b55856a611f562b97f67c5cf547ce859661650493c59e66a228da992c7a0b83df10737002f5d8cd1354178aff1c8f5bafbe82a90af95bc2cbf5b75c6c5d7d7cc1c825d6c412e73986b5bd26a738667d4dd947fa7bd649b1501d7e316518ee7b3c493003d3a08fdc20c7f72c4d5d146c02d6b45d90f5ddd0d33876d06d899bc736a634b94b922cb414c4e019ec9afff4260e09beeb48da103953917567633f87f1f0d0f00b66ece24acffc5610920e872aa6c3bf65b691f9c7149ab57f429f2e36db36610cc97215340dd7f792c81c9be718abe351456189787752d0a90c486262ab598546e70b2d8793ac7b101a74e87e6efd75a2c96b46ae186d6961a307e85d285e7a422cc655fed75df684fe7cc75dfc84ac3e1a39912bb9f80e32f2cd820f7c955aec7b298939cdefd7618d256e07f2a9d3e8ab82788d4369721e322b77a8ba1f031a4779845d27d7ff3c79e3d64f18e6a9db9e3cbd39ef20281ee9fda1fdf48983f37ce7063788cd2b45d97631ab7ed11e9a3b5bdaa6a640fb73533183aee376f424bfc6830ee553ce7edc1269083e622deb68284265cb2eb5250ca9e2f90ce7af20a0a9282fd402ae5618ebbfcaf2fb5492d9bb91c061effc05205cb867d7af217464938254c2c06f544179877c621ccdc151c9da9959ca8713bedac465d6ec458b0732482c5eefb658440ef7b80d2e216bbfa767b5ea0b7744ce26936c29fa4b5d78a06121b586653f6c50c0105bb16afbee70ad05c629992013723a27ebf83ace55ce69b6371de5542e65c8542ee8dd5f16b2c7c9e0f9705ccd5c77e5037f7ab6b3398eb3c70197bde3064f8bf058c67b09d4c7600284fdcda8d54bb7057bc93ea588adb587aea9019ece02d2ac7ae641415d162f3e2e807b06d2b5f08f35bc9e45ce11e992454169d5122b5ba3c5e91919cc564f98105d896119027e432e9a8edc42d96559c22344d51f6481fcde8948690c9b9e1a744a90a4226e772ba7aa1c1e4cbc42f9347584ded6a98f392ee5a2099f0faf41f6571a53c6990d64aa4bf4628d13a4882dd17e97bed701301c3651af96a9bc8cdd80cd872476940d58633773da4526fe4cdc1708990a23fe006b645d19bc67e36390da0b4bc033a6ec129c7622be0b5daf20a2bc6ed4d4935596a142c167270535f1b631f1e170031f58b3d215bc071a55a67d7147ea8dd7681e4687d29e11ec180cd728c1c81dc807fbc7bee5435bc06c8eb07ea07b644decaf28a4548656ad8a2e6b1e7309f142c95027f1133c51f06ef9797f15cbd672cf56cec6f4dd37eaec0fb9a956cb67aa8cd29cdf946f055f48c984d5af9486c88b8487dc2b38bbb749e4965fb71d53edd757e099b71873765c5f53a780ff910d19c9f7dbbbb8f9b1db41e6f4725672ee1be086746120738b51bc9d525ee5426652ed1e4cbb7734cf4855bc06d0163714df25e3453dc3bcf6a0835a29f605f2a1e1d10c10600e3f89595562809225916e5e56a097e16012171d3c76ee2af6a4a966b460dfbda3b0cd309628ea7370fde14938d0674ea6a3551d360c2af85aebb89a1ee7495b2d20211e80a75cb3f3478458874bb6e037f639cac8450f272ed07766f7aecc5f0ed8b38f65a78525929d19069d3f3e89e693aa800794d711530881dbf7b64746131f3206374473afa600ba2b40322fe6bf754dcca3308de32d026907c664abee952a34c6c4bacfa0d0b00cd29288dc1fdea9052dc309600ee278893ec22f5ff5d942f2a3b517076bab501cce108de90eb25e809222622365d650a2f0d16456a01770f344ea2f3b0fdf5b92a6e77e75634498b94e9c2daf36bca5043d854bf724a0d814a004202a1e9786903de9190372f9443faafc3882b5689032c5d0df90ab8d7b02a0d443a90c3193609f496c00af1ff9db48c7c1f2e741010af118d847f2a2440618990730ed549360dbff0f422066f2b6421bd0354259309b201c82c5e93b93c61240a83c1b6188f7d5013a348cc2679e74228c1134bec3b82b570f67f9e3ffa0818bec6611d7ba6b9ea40a269dec5723fe8b33436fdf76337f11b15864b2465755c8e084eae26fc043e0c2d217e98d39a2e419fc4c7318a6e15b612831f6a4dec017ab2e1cf1d9723ac7de3e713cefd300685ab8193c575661c799694533bcb5694029527b0e1aaebd19f45f94d5e03a01c90b21c3233a696756b7a14d29ca876a8f3bccbcec37278d1af99394ae813f70c24234f708b89bf2bdcfc4c12528bfbcf50824994e9e13a42756baa3fff397df333237bbcad0f3df051d61d1b4eada72c1fa7426c644b8b01fda0e4ddefa7b79c6d3afa56fd4ab837b066867ff60b01032c06b150c6b0e735d5586e971aca69122e85994002a476162edc5a0ec7a359d86879a577d4ee6838a75a57f29bed4ca092a3dc5626b76d3c0248f0c363e36a7077d9a3f70868ca2412895dc2ce5dbffee277ba056932243bcaa703822773551dc568e3aa167e597c541c299030d409d0ee90297c2de23e900f3137fa87639a3fc08f7c2e265ea3d62764d9a90ebac10c701835cc5ae23ab1c93a084dc245e43252f23d3b8951bc648fcf38f7a81efc67bb8889ee587d70bb0f6a2fe9f1822b0d78c59b21ea8c4d1b26d24c6f597984292bedb7ca5cdf924c2066eb15db6633c947984c16960bad48c1471ddd8385f4d7d7809cf4d2d2eec7800d2e2ec4b7527fff78ad41efe90ca137d7e4c4901f67076bfb6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好，点击这里输入密码。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> encrypted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFWriteUp-练习</title>
      <link href="/2024/04/20/CTFWriteUp-Web%E7%BB%83%E4%B9%A0/"/>
      <url>/2024/04/20/CTFWriteUp-Web%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="XCTF-攻防世界"><a href="#XCTF-攻防世界" class="headerlink" title="XCTF 攻防世界"></a>XCTF 攻防世界</h2><h3 id="1-Training-WWW-Robots"><a href="#1-Training-WWW-Robots" class="headerlink" title="1. Training-WWW-Robots"></a>1. Training-WWW-Robots</h3><blockquote><p> In this little training challenge, you are going to learn about the <a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard">Robots_exclusion_standard</a>.<br>The robots.txt file is used by web crawlers to check if they are allowed to crawl and index your website or only parts of it.<br>Sometimes these files reveal the directory structure instead protecting the content from being crawled.</p><p>Enjoy!</p></blockquote><p>阅读对应的维基百科，知道 <code>robot.txt</code> 是实现网络爬虫协议的一个组成部分，它存储于服务器的根目录下。</p><p>在该文件中指定哪些文件是不应该被爬取的。</p><p>它是一个约定，并不能做到保护的作用。</p><p>在 URL 后面拼加 <code>robot.txt</code>，得到 <code>http://61.147.171.105:52231/robots.txt</code>。</p><p>看到被保护的内容：</p><p><img src="/images/CTF/robot.png"></p><p>拼接得到 <code>http://61.147.171.105:52231/fl0g.php</code>.</p><p>拿到 flag：<code>cyberpeace&#123;bbbee5d48d26e0c84d4d1e3007a0919a&#125;</code>。</p><h3 id="2-get-post"><a href="#2-get-post" class="headerlink" title="2. get_post"></a>2. get_post</h3><blockquote><p>请用GET方式提交一个名为a,值为1的变量</p><p>请再以POST方式随便提交一个名为b,值为2的变量</p></blockquote><ol><li><a href="http://61.147.171.105:50813/?*a=1*%EF%BC%8C%E6%8B%BC%E6%8E%A5">http://61.147.171.105:50813/?*a=1*，拼接</a> <code>?a=1</code>。好像我只会这个。</li><li>不知道怎么发送 post 请求，网上查了下要用工具。正在下载 burpsuite。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/17/hello-world/"/>
      <url>/2024/04/17/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="2024-希望新的交手能很精彩"><a href="#2024-希望新的交手能很精彩" class="headerlink" title="2024 希望新的交手能很精彩"></a>2024 希望新的交手能很精彩</h2><p>渡过了失败的 2023，来到了失败的 2024。</p><p>翻出来了陈年老博客，重新部署了一番，也算扫清屋子再请客。</p><p>按时睡觉，按时吃饭，好好学习，好好健身。</p><p>希望一战上岸。</p><p>感谢 <a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a> 的无私奉献。</p><p>本博客采用 github page + hexo 搭建。</p><blockquote><p>鱼 <br>于二〇二四正月初四 <br>时晚冬暖阳午悬当空</p></blockquote><hr><p>感谢蛋蛋爱了我一次。<br>于 2024 年 4 月 2 日上午复试通过。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 🚀</title>
      <link href="/2024/02/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-%F0%9F%9A%80/"/>
      <url>/2024/02/25/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<hr><p>这个博客记录一下我读过的一些论文，用于准备考研复试 &#x2F; ra 申请和日常学习。</p><table><thead><tr><th></th><th align="center">题目</th><th align="center">出处</th><th align="center">主题</th><th align="center">发表时间</th><th align="center">开始阅读</th></tr></thead><tbody><tr><td>1</td><td align="center">Software-Defined Network Assimilation: Bridging the Last Mile Towards Centralized Network Configuration Management with NAssim</td><td align="center">SIGCOMM</td><td align="center">Network manageability; Network management; Computing methodologies</td><td align="center">2022</td><td align="center">2024.2.25</td></tr><tr><td>2</td><td align="center">Large Language Model guided Protocol Fuzzing</td><td align="center">NDSS</td><td align="center">LLM; Fuzzing; Networks; Software testing</td><td align="center">2024</td><td align="center">2024.4.12</td></tr><tr><td>3</td><td align="center">Examining Zero-Shot Vulnerability Repair with Large Language Models</td><td align="center">S&amp;P</td><td align="center">LLM; Vulnerability</td><td align="center">2023</td><td align="center">2024.4.13</td></tr><tr><td>4</td><td align="center">How well does LLM generate security tests?</td><td align="center">arxiv</td><td align="center">LLM; Fuzzing; Software testing; Prompt</td><td align="center">2023</td><td align="center">2024.4.13</td></tr><tr><td>5</td><td align="center">Large Language Models for Test-Free Fault Localization</td><td align="center">ICSE</td><td align="center">LLM; Fault Localization</td><td align="center">2024</td><td align="center">2024.4.13</td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="how-to-read-a-paper"><a href="#how-to-read-a-paper" class="headerlink" title="how to read a paper"></a>how to read a paper</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><em>废纸</em>，不值得了解</li><li><em>值得了解</em>的论文，快速浏览，知道方法和大致思路，不用深究（大部分论文）</li><li><em>值得精读</em>，有很大启发性和突破性，写作良好，经得住考验</li><li><em>经典论文</em>，搞清楚方法和细节，自己尝试复现</li></ol><h3 id="看结构"><a href="#看结构" class="headerlink" title="看结构"></a>看结构</h3><p>八股文结构：</p><ol><li>Abstract（开头一小段）</li><li>Introduction（1 - 2 页）- 方法、创新点、大致实验效果</li><li>Related works（在最后）</li><li>Conclusions（结尾）</li><li>Approach（具体细节，可能拆分为很多章节）</li><li>Experiments（实验）</li></ol><h3 id="阅读顺序"><a href="#阅读顺序" class="headerlink" title="阅读顺序"></a>阅读顺序</h3><blockquote><p>原则：不要过于纠结某一句话，侧重理解 author 的想法，切忌从头到尾字斟句酌。</p></blockquote><ol><li>读 1 - 2 遍 Abstract<ul><li>I. 处理什么问题</li><li>II. 提出了什么方法和创新点</li><li>III. 方法取得了什么效果</li></ul></li><li>跳过中间部分，直接看论文的实验部分<ul><li>I. 实验环境的搭建（数据集、测试方法、评估指标）</li><li>II. 作者跟什么方法进行比较（本领域景点方法，SOTA (state-of-the-art)）</li><li>III. 取得了何种定性&#x2F;定量的效果（消融实验证明有效性）</li></ul></li></ol><p>针对 [分类 2] 中的论文读到这里就可以结束了，对于 [分类 3&#x2F;4] 可以继续读下去。</p><ol start="3"><li>读 Introduction  - 更详细版的 Abstract</li><li>读 Approach，细节性的推导和算法实现（对于经典论文慢下来反复看这部分，讲给别人听）</li><li>Related Works - 扫一扫，可以跳过</li><li>用审稿人的视角问自己一些问题<ul><li>作者提出了什么方法和创新点</li><li>方法取得了什么效果</li><li>方法具有什么局限性和改进之处</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> research </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习小记</title>
      <link href="/2024/02/23/Rust%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2024/02/23/Rust%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/rust-cover.jpg"></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h5 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h5><p>rust 中变量默认不可变。</p><p>需要关键字 <code>mut</code> 让变量可变。</p><h5 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h5><p>其实就是其他语言中的 <code>赋值</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="未使用变量"><a href="#未使用变量" class="headerlink" title="未使用变量"></a>未使用变量</h5><p>rust 中定义了一个变量但是未使用，编译器会给以个 warning。</p><p>但是可以通过如同 Golang 中的 <em>_</em> 来忽略。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">_x</span> = <span class="number">0xff</span>;</span><br></pre></td></tr></table></figure><h5 id="变量遮蔽"><a href="#变量遮蔽" class="headerlink" title="变量遮蔽"></a>变量遮蔽</h5><p>可以通过多次的 <code>let</code> 将不同类型的值绑定到同一个名称的变量。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = x.<span class="title function_ invoke__">len</span>();</span><br></pre></td></tr></table></figure><h5 id="integer"><a href="#integer" class="headerlink" title="integer"></a>integer</h5><p>rust 默认整数类型为 <code>i32</code>，即<strong>有符号整数</strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">99</span>;<span class="comment">// x is i32</span></span><br></pre></td></tr></table></figure><h5 id="float"><a href="#float" class="headerlink" title="float"></a>float</h5><p>rust 默认浮点数使用 <code>f64</code>，即 64 位精度的浮点数。</p><p>在 f32 上成立的 <code>0.1 + 0.2 == 0.3</code> 在 f64 上不成立，因为 f64 精度更高。</p><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><p>数学上未定义的数。</p><p>可以使用 <code>is_nan()</code> 判断一个数是否为非数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x = (-1 as f64).sqrt();</span><br><span class="line">if x.is_nan() &#123;</span><br><span class="line">    println!(&quot;x is nan!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>rust 的整数类型没有实现 <em>.sqrt() 方法</em></p></blockquote><h5 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h5><p>快速生成连续的数值序列。</p><p><code>a..=b</code> 表示生成 <em>[a, b]</em> 之内所有的数。</p><p><code>a..b</code> 表示生成 <em>[a, b)</em> 之内所有的数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单元类型"><a href="#单元类型" class="headerlink" title="单元类型 ()"></a>单元类型 ()</h5><p>如 <code>fn main()</code> 就返回 <code>()</code>，这个小括号叫单元类型。</p><p>这种返回 <code>()</code> 的函数（怎么看起来啥都不返回？其实真的没啥东西返回）叫做 <em>发散函数</em>。</p><p>这不占用任何内存。</p><h5 id="语句-表达式"><a href="#语句-表达式" class="headerlink" title="语句 &amp; 表达式"></a>语句 &amp; 表达式</h5><p>语句指的是执行某个操作，但没有返回值的东西。</p><p>例如进行变量绑定，执行完就结束，不提供任何多余产物。</p><p>而表达式会进行<em>求值</em>，将结果返回。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">123</span>;<span class="comment">// 语句 Statement</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="number">456</span>;<span class="comment">// 语句 Statement</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x + y);<span class="comment">// x + y 表达式 Expression</span></span><br></pre></td></tr></table></figure><p>表达式只是个式子，不能包含分号，否则就成为了表达式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span><span class="comment">// 不能加分号</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>rust 是强类型语言，每个函数参数都需要指明类型。</p><ol><li><p>没有返回值的函数默认返回 ()，不用显示写出来，但是写出来也不算错。</p><p>通过 <code>;</code> 结束的语句返回一个 ()。</p></li><li><p>永不返回的函数使用感叹号 <code>!</code> 作为返回值。</p><p>该函数没有出口，永远不返回，一般用作导致程序崩溃的函数。</p></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">forever</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权和借用"><a href="#所有权和借用" class="headerlink" title="所有权和借用"></a>所有权和借用</h2><blockquote><p>rust 用于管理内存资源的机制，类似 java、golang 中的 GC。</p></blockquote><p>通常高级语言提供的内存管理方法有三种：</p><ol><li>手动内存管理（如 C, C++）</li><li>自动垃圾回收，即 GC（如 JVM 回收, Golang 三色标记）</li><li>所有权（如 Rust）</li></ol><p>Rust 带的所有权机制是通过编译器在编译期检查进行内存的分配和释放，并不占用运行时间。</p><h5 id="所有权原则"><a href="#所有权原则" class="headerlink" title="所有权原则"></a>所有权原则</h5><ol><li><p>每一个值都被一个变量拥有。</p><p>该变量被称为值的<em>所有者</em>。</p></li><li><p>一个值只能<em>同时</em>被<em>一个变量</em>拥有。</p></li><li><p>所有者离开作用于，该值被丢弃。</p></li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><h2 id="程序控制流"><a href="#程序控制流" class="headerlink" title="程序控制流"></a>程序控制流</h2><h2 id="泛型和-traits"><a href="#泛型和-traits" class="headerlink" title="泛型和 traits"></a>泛型和 traits</h2><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h2 id="返回值和-panic"><a href="#返回值和-panic" class="headerlink" title="返回值和 panic!"></a>返回值和 panic!</h2><h2 id="crate-和-module"><a href="#crate-和-module" class="headerlink" title="crate 和 module"></a>crate 和 module</h2>]]></content>
      
      
      
        <tags>
            
            <tag> PL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 hexo 部署完域名失效问题</title>
      <link href="/2024/02/23/%E4%BF%AE%E5%A4%8D-hexo-%E9%83%A8%E7%BD%B2%E5%AE%8C%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/23/%E4%BF%AE%E5%A4%8D-hexo-%E9%83%A8%E7%BD%B2%E5%AE%8C%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>每次更新完博客并 deploy 之后，访问阿里云域名无法重新解析到 <code>xxx.github.io</code>，一打开就是 404。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>没有在 hexo 项目中加入 <strong>CNAME</strong>。</p><p>在 hexo 根目录下的 source 目录下新增文件 CNAME，并填入域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;xxx.yyy&quot; &gt; source/CNAME &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><p>重新打开网站会发现一切都正常了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具网站</title>
      <link href="/2024/02/23/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
      <url>/2024/02/23/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="在线-DNS-解析"><a href="#在线-DNS-解析" class="headerlink" title="在线 DNS 解析"></a>在线 DNS 解析</h2><p><a href="http://www.ip33.com/dns.html">http://www.ip33.com/dns.html</a></p><h2 id="在线-latex-论文撰写网站"><a href="#在线-latex-论文撰写网站" class="headerlink" title="在线 latex 论文撰写网站"></a>在线 latex 论文撰写网站</h2><p><a href="https://www.overleaf.com/">https://www.overleaf.com</a></p><h2 id="新手-archlinux-配置网站"><a href="#新手-archlinux-配置网站" class="headerlink" title="新手 archlinux 配置网站"></a>新手 archlinux 配置网站</h2><p><a href="https://arch.icekylin.online/">https://arch.icekylin.online</a></p><h2 id="Linux-小工具"><a href="#Linux-小工具" class="headerlink" title="Linux 小工具"></a>Linux 小工具</h2><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h5 id="在当前目录下全文件字符串匹配"><a href="#在当前目录下全文件字符串匹配" class="headerlink" title="在当前目录下全文件字符串匹配"></a>在当前目录下全文件字符串匹配</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">&quot;xxx&quot;</span> .</span><br></pre></td></tr></table></figure><ul><li><code>grep</code>是用于在文件中搜索指定模式的命令。</li><li><code>-r</code>选项表示递归地在子目录中搜索。</li><li>“xxx”是要匹配的字符串。</li><li><code>.</code>表示当前目录。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archlinux 配置中文輸入法</title>
      <link href="/2024/02/22/Archlinux-%E9%85%8D%E7%BD%AE%E8%BC%B8%E5%85%A5%E6%B3%95/"/>
      <url>/2024/02/22/Archlinux-%E9%85%8D%E7%BD%AE%E8%BC%B8%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于对于 Archlinux 下输入法的配置不是很熟悉，因此决定将之前配置的输入法全都 remove 干净重新配置一遍。</p><h2 id="什么是-fcitx"><a href="#什么是-fcitx" class="headerlink" title="什么是 fcitx"></a>什么是 fcitx</h2><p><a href="https://fcitx-im.org/wiki/Fcitx_5">Fcitx5</a> 是一个<a href="https://wiki.archlinuxcn.org/wiki/Input_method">输入法</a>框架，它具有轻量级内核，并通过 addon 提供额外的语言支持。Fcitx5 接替 <a href="https://wiki.archlinuxcn.org/wiki/Fcitx">Fcitx</a>。</p><h2 id="卸载-fcitx5"><a href="#卸载-fcitx5" class="headerlink" title="卸载 fcitx5"></a>卸载 fcitx5</h2><p>Following is the description from archlinux.org.</p><p>To remove a package, its dependencies and all the packages that depend on the target package:</p><blockquote><p><strong>Warning:</strong> This operation is recursive, and must be used with care since it can remove many potentially needed packages.</p></blockquote><p>I have uninstalled all the input method thus I can only use English currently.</p><p>噢没事了，还挺快的，已经可以打中文了。</p><h2 id="配置-fcitx5"><a href="#配置-fcitx5" class="headerlink" title="配置 fcitx5"></a>配置 fcitx5</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>具体可以参考这里 <a href="https://arch.icekylin.online/guide/rookie/desktop-env-and-app.html#_10-%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95">桌面环境与常用应用安装 </a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im <span class="comment"># 输入法基础包组</span></span><br><span class="line">sudo pacman -S fcitx5-chinese-addons <span class="comment"># 官方中文输入引擎</span></span><br><span class="line">sudo pacman -S fcitx5-material-color <span class="comment"># 输入法主题</span></span><br></pre></td></tr></table></figure><p>之后连带依赖会发现装了这些东西：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">extra/fcitx5 5.1.7-3 (fcitx5-im) [installed]<span class="comment"># fcitx 本体</span></span><br><span class="line">extra/fcitx5-chinese-addons 5.1.3-1 [installed]<span class="comment"># 中文引擎</span></span><br><span class="line">extra/fcitx5-configtool 5.1.3-1 (fcitx5-im) [installed]<span class="comment"># 配置工具</span></span><br><span class="line">extra/fcitx5-gtk 5.1.1-1 (fcitx5-im) [installed]<span class="comment"># GTK 应用程序下的输入法支持</span></span><br><span class="line">extra/fcitx5-material-color 0.2.1-1 [installed]<span class="comment"># 类似外观？</span></span><br><span class="line">extra/fcitx5-qt 5.1.4-4 (fcitx5-im) [installed]<span class="comment"># Qt 应用下的输入法支持</span></span><br></pre></td></tr></table></figure><h4 id="配置-environment"><a href="#配置-environment" class="headerlink" title="配置 environment"></a>配置 environment</h4><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>在配置文件中加入然后保存退出。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br><span class="line">GLFW_IM_MODULE=ibus</span><br></pre></td></tr></table></figure><p>文档上说如果是 wayland 要额外做几件事情。</p><ol><li>在「系统设置 - 输入设备 - 虚拟键盘」中选中 Fcitx 5</li><li><code>nvironment</code> 仅保留 <code>XMODIFIERS=@im=fcitx</code> 一行</li></ol><p>我发现「1」已经默认配置好了，「2」不管删不删去都不影响。</p><blockquote><p><strong>如何查看自己用的是 wayland 还是 x11</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loginctl show-session <span class="string">&quot;<span class="variable">$XDG_SESSION_ID</span>&quot;</span> -p Type</span><br></pre></td></tr></table></figure></blockquote><h2 id="配置-Rime-中州韵输入法引擎"><a href="#配置-Rime-中州韵输入法引擎" class="headerlink" title="配置 Rime 中州韵输入法引擎"></a>配置 Rime 中州韵输入法引擎</h2><h4 id="什么是-rime"><a href="#什么是-rime" class="headerlink" title="什么是 rime"></a>什么是 rime</h4><p>Rime 不是一種輸入法。是從各種常見鍵盤輸入法中提煉出來的抽象的輸入算法框架。因爲 Rime 涵蓋了大多數輸入法的「共性」，所以在不同的設定下，Rime 可化身爲不同的輸入法用來打字。</p><p>要讓 Rime 實現某種具體輸入法的功能，就需要一些數據來描述這種輸入法以何種形式工作。即，定義該輸入法的「個性」。</p><p>如「漢語拼音」、「注音」、「倉頡碼」、「五筆字型」，這些方法可憑藉 Rime 提供的通用設施、給定不同的工作參數來實作。以本文介紹的規格寫成一套套的配方，就是 Rime 輸入方案。</p><p>（引用自 bib [5]）</p><h4 id="安装-rime"><a href="#安装-rime" class="headerlink" title="安装 rime"></a>安装 rime</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-rime</span><br></pre></td></tr></table></figure><p>在設置裏面啓用。</p><p>我这里 rime 默认是繁体，需要手动设置默认简体。</p><p>在<code>$HOME/.local/share/fcitx5/rime/build</code>下找到luna拼音的配置文件<code>luna_pinyin.schema.yaml</code>，找到如下配置并在<strong>- name: simplification</strong>下加入一行：<strong>reset: 1</strong>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switches:</span><br><span class="line">  - name: ascii_mode</span><br><span class="line">    reset: 0</span><br><span class="line">    states: [&quot;中文&quot;, &quot;西文&quot;]</span><br><span class="line">  - name: full_shape</span><br><span class="line">    states: [&quot;半角&quot;, &quot;全角&quot;]</span><br><span class="line">  - name: simplification</span><br><span class="line">    reset: 1</span><br><span class="line">    states: [&quot;漢字&quot;, &quot;汉字&quot;]</span><br><span class="line">  - name: ascii_punct</span><br><span class="line">    states: [&quot;。，&quot;, &quot;．，&quot;]</span><br></pre></td></tr></table></figure><p>不知道为什么现在我右键 Input Method 没有 restart 这个选项了，所以只好 kill 了 fcitx5 这个进程重新启动了。</p><p>现在可以输出简体中文了。</p><h4 id="安装雾凇拼音"><a href="#安装雾凇拼音" class="headerlink" title="安装雾凇拼音"></a>安装雾凇拼音</h4><p>本来想换一个，但是不知道为什么配置不成功…</p><p>后续再看看吧，但是引入 rime-ice 后多了几个 rime 自带的输入法。</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paru -Ss rime-ice-git</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p>加入<code>__include: rime_ice_suggestion:/</code>，以补丁形式引入。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">patch:</span><br><span class="line">  schema_list:</span><br><span class="line">    # - schema: double_pinyin_flypy # 小鹤双拼</span><br><span class="line">    - schema: luna_pinyin # 全拼</span><br><span class="line">    # - schema: double_pinyin # 自然码</span><br><span class="line">    # - schema: rime-ice-double-pinyin</span><br><span class="line"></span><br><span class="line">    # 仅使用「雾凇拼音」的默认配置，配置此行即可</span><br><span class="line">    __include: rime_ice_suggestion:/</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://wiki.archlinuxcn.org/wiki/Fcitx5">Fcitx5</a></li><li><a href="https://rime.im/">RIME | 中州韻輸入法引擎</a></li><li><a href="https://arch.icekylin.online/guide/rookie/desktop-env-and-app.html#_10-%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95">桌面环境与常用应用安装 </a></li><li><a href="https://aimerneige.com/zh/post/install-fcitx5-with-rime-on-linux/">Linux 下安装 fcitx5 与 Rime    </a></li><li><a href="http://anclark.github.io/2022/05/03/Struggle_with_Linux/Arch_Linux%E5%AE%89%E8%A3%85fcitx5/">Arch Linux 安装Fcitx5及相关输入法    </a></li><li><a href="https://github.com/rime/home/wiki/CustomizationGuide#%E4%B8%80%E4%BE%8B%E5%AE%9A%E8%A3%BD%E6%96%B9%E6%A1%88%E9%81%B8%E5%96%AE">Rime 定製指南</a></li><li><a href="https://github.com/rime/home/wiki/RimeWithSchemata">RimeWithSchemata</a></li><li><a href="https://aur.archlinux.org/packages/rime-ice-git">Package Details: rime-ice-git r326.10864f9-1</a></li><li><a href="https://blog.beautyyu.one/archlinux-gnome-chinese-input-fcitx5-rime-ice-solution">Archlinux + Gnome 中文输入法解决方案：Fcitx5 + Rime Ice 雾凇拼音</a></li><li><a href="https://github.com/iDvel/rime-ice?tab=readme-ov-file">雾凇拼音</a></li><li><a href="https://aur.archlinux.org/packages/rime-ice-git">Package Details: rime-ice-git r326.10864f9-1</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
